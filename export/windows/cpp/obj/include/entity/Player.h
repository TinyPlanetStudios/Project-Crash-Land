// Generated by Haxe 3.3.0
#ifndef INCLUDED_entity_Player
#define INCLUDED_entity_Player

#ifndef HXCPP_H
#include <hxcpp.h>
#endif

#ifndef INCLUDED_flixel_FlxSprite
#include <flixel/FlxSprite.h>
#endif
HX_DECLARE_CLASS0(GravZone)
HX_DECLARE_CLASS1(entity,Ladder)
HX_DECLARE_CLASS1(entity,Player)
HX_DECLARE_CLASS1(flixel,FlxBasic)
HX_DECLARE_CLASS1(flixel,FlxObject)
HX_DECLARE_CLASS1(flixel,FlxSprite)
HX_DECLARE_CLASS2(flixel,group,FlxTypedGroup)
HX_DECLARE_CLASS2(flixel,util,IFlxDestroyable)

namespace entity{


class HXCPP_CLASS_ATTRIBUTES Player_obj : public  ::flixel::FlxSprite_obj
{
	public:
		typedef  ::flixel::FlxSprite_obj super;
		typedef Player_obj OBJ_;
		Player_obj();

	public:
		void __construct( ::Dynamic __o_X, ::Dynamic __o_Y, ::Dynamic SimpleGraphic);
		inline void *operator new(size_t inSize, bool inContainer=true,const char *inName="entity.Player")
			{ return hx::Object::operator new(inSize,inContainer,inName); }
		inline void *operator new(size_t inSize, int extra)
			{ return hx::Object::operator new(inSize+extra,true,"entity.Player"); }
		static hx::ObjectPtr< Player_obj > __new( ::Dynamic __o_X, ::Dynamic __o_Y, ::Dynamic SimpleGraphic);
		static Dynamic __CreateEmpty();
		static Dynamic __Create(hx::DynamicArray inArgs);
		//~Player_obj();

		HX_DO_RTTI_ALL;
		hx::Val __Field(const ::String &inString, hx::PropertyAccess inCallProp);
		hx::Val __SetField(const ::String &inString,const hx::Val &inValue, hx::PropertyAccess inCallProp);
		void __GetFields(Array< ::String> &outFields);
		static void __register();
		void __Mark(HX_MARK_PARAMS);
		void __Visit(HX_VISIT_PARAMS);
		::String __ToString() const { return HX_HCSTRING("Player","\x81","\x5f","\x4d","\x6c"); }

		Int gravity;
		Int speed;
		Float anglePos;
		Float radialPos;
		Float angleVel;
		Float radialVel;
		Bool IgnoreGravity;
		::Array< ::Dynamic> GravZones;
		 ::GravZone CurrentZone;
		 ::GravZone RockWall;
		 ::GravZone TrapDoor;
		 ::GravZone KeyDoor;
		 ::GravZone CodeDoor;
		::Array< ::Dynamic> Ladders;
		void update(Float elapsed);

		 ::GravZone getCurrentGravZone();
		::Dynamic getCurrentGravZone_dyn();

		Bool OnLadder();
		::Dynamic OnLadder_dyn();

};

} // end namespace entity

#endif /* INCLUDED_entity_Player */ 
