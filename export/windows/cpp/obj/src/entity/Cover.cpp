// Generated by Haxe 3.3.0
#include <hxcpp.h>

#ifndef INCLUDED_entity_Cover
#include <entity/Cover.h>
#endif
#ifndef INCLUDED_flixel_FlxBasic
#include <flixel/FlxBasic.h>
#endif
#ifndef INCLUDED_flixel_FlxObject
#include <flixel/FlxObject.h>
#endif
#ifndef INCLUDED_flixel_FlxSprite
#include <flixel/FlxSprite.h>
#endif
#ifndef INCLUDED_flixel_tweens_FlxTween
#include <flixel/tweens/FlxTween.h>
#endif
#ifndef INCLUDED_flixel_util_IFlxDestroyable
#include <flixel/util/IFlxDestroyable.h>
#endif

namespace entity{

void Cover_obj::__construct(Float anglea,Float angleb,Float radiala,Float radialb, ::Dynamic graphic){
            	HX_STACK_FRAME("entity.Cover","new",0xff43ee7e,"entity.Cover.new","entity/Cover.hx",24,0xa3df53b3)
            	HX_STACK_THIS(this)
            	HX_STACK_ARG(anglea,"anglea")
            	HX_STACK_ARG(angleb,"angleb")
            	HX_STACK_ARG(radiala,"radiala")
            	HX_STACK_ARG(radialb,"radialb")
            	HX_STACK_ARG(graphic,"graphic")
HXLINE(  25)		super::__construct((int)365,(int)85,graphic);
HXLINE(  26)		this->radialStart = radiala;
HXLINE(  27)		this->radialEnd = radialb;
HXLINE(  29)		this->angleStart = anglea;
HXLINE(  30)		this->angleEnd = angleb;
            	}

Dynamic Cover_obj::__CreateEmpty() { return new Cover_obj; }

hx::ObjectPtr< Cover_obj > Cover_obj::__new(Float anglea,Float angleb,Float radiala,Float radialb, ::Dynamic graphic)
{
	hx::ObjectPtr< Cover_obj > _hx_result = new Cover_obj();
	_hx_result->__construct(anglea,angleb,radiala,radialb,graphic);
	return _hx_result;
}

Dynamic Cover_obj::__Create(hx::DynamicArray inArgs)
{
	hx::ObjectPtr< Cover_obj > _hx_result = new Cover_obj();
	_hx_result->__construct(inArgs[0],inArgs[1],inArgs[2],inArgs[3],inArgs[4]);
	return _hx_result;
}


Cover_obj::Cover_obj()
{
}

void Cover_obj::__Mark(HX_MARK_PARAMS)
{
	HX_MARK_BEGIN_CLASS(Cover);
	HX_MARK_MEMBER_NAME(radialStart,"radialStart");
	HX_MARK_MEMBER_NAME(radialEnd,"radialEnd");
	HX_MARK_MEMBER_NAME(angleStart,"angleStart");
	HX_MARK_MEMBER_NAME(angleEnd,"angleEnd");
	HX_MARK_MEMBER_NAME(tween,"tween");
	 ::flixel::FlxSprite_obj::__Mark(HX_MARK_ARG);
	HX_MARK_END_CLASS();
}

void Cover_obj::__Visit(HX_VISIT_PARAMS)
{
	HX_VISIT_MEMBER_NAME(radialStart,"radialStart");
	HX_VISIT_MEMBER_NAME(radialEnd,"radialEnd");
	HX_VISIT_MEMBER_NAME(angleStart,"angleStart");
	HX_VISIT_MEMBER_NAME(angleEnd,"angleEnd");
	HX_VISIT_MEMBER_NAME(tween,"tween");
	 ::flixel::FlxSprite_obj::__Visit(HX_VISIT_ARG);
}

hx::Val Cover_obj::__Field(const ::String &inName,hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 5:
		if (HX_FIELD_EQ(inName,"tween") ) { return hx::Val( tween); }
		break;
	case 8:
		if (HX_FIELD_EQ(inName,"angleEnd") ) { return hx::Val( angleEnd); }
		break;
	case 9:
		if (HX_FIELD_EQ(inName,"radialEnd") ) { return hx::Val( radialEnd); }
		break;
	case 10:
		if (HX_FIELD_EQ(inName,"angleStart") ) { return hx::Val( angleStart); }
		break;
	case 11:
		if (HX_FIELD_EQ(inName,"radialStart") ) { return hx::Val( radialStart); }
	}
	return super::__Field(inName,inCallProp);
}

hx::Val Cover_obj::__SetField(const ::String &inName,const hx::Val &inValue,hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 5:
		if (HX_FIELD_EQ(inName,"tween") ) { tween=inValue.Cast<  ::flixel::tweens::FlxTween >(); return inValue; }
		break;
	case 8:
		if (HX_FIELD_EQ(inName,"angleEnd") ) { angleEnd=inValue.Cast< Float >(); return inValue; }
		break;
	case 9:
		if (HX_FIELD_EQ(inName,"radialEnd") ) { radialEnd=inValue.Cast< Float >(); return inValue; }
		break;
	case 10:
		if (HX_FIELD_EQ(inName,"angleStart") ) { angleStart=inValue.Cast< Float >(); return inValue; }
		break;
	case 11:
		if (HX_FIELD_EQ(inName,"radialStart") ) { radialStart=inValue.Cast< Float >(); return inValue; }
	}
	return super::__SetField(inName,inValue,inCallProp);
}

void Cover_obj::__GetFields(Array< ::String> &outFields)
{
	outFields->push(HX_HCSTRING("radialStart","\x03","\xdd","\xa6","\x22"));
	outFields->push(HX_HCSTRING("radialEnd","\x3c","\x52","\xef","\xf6"));
	outFields->push(HX_HCSTRING("angleStart","\x8f","\xe3","\x90","\x87"));
	outFields->push(HX_HCSTRING("angleEnd","\xc8","\x5d","\x56","\x2b"));
	outFields->push(HX_HCSTRING("tween","\x6b","\xaa","\x70","\x19"));
	super::__GetFields(outFields);
};

#if HXCPP_SCRIPTABLE
static hx::StorageInfo Cover_obj_sMemberStorageInfo[] = {
	{hx::fsFloat,(int)offsetof(Cover_obj,radialStart),HX_HCSTRING("radialStart","\x03","\xdd","\xa6","\x22")},
	{hx::fsFloat,(int)offsetof(Cover_obj,radialEnd),HX_HCSTRING("radialEnd","\x3c","\x52","\xef","\xf6")},
	{hx::fsFloat,(int)offsetof(Cover_obj,angleStart),HX_HCSTRING("angleStart","\x8f","\xe3","\x90","\x87")},
	{hx::fsFloat,(int)offsetof(Cover_obj,angleEnd),HX_HCSTRING("angleEnd","\xc8","\x5d","\x56","\x2b")},
	{hx::fsObject /*::flixel::tweens::FlxTween*/ ,(int)offsetof(Cover_obj,tween),HX_HCSTRING("tween","\x6b","\xaa","\x70","\x19")},
	{ hx::fsUnknown, 0, null()}
};
static hx::StaticInfo *Cover_obj_sStaticStorageInfo = 0;
#endif

static ::String Cover_obj_sMemberFields[] = {
	HX_HCSTRING("radialStart","\x03","\xdd","\xa6","\x22"),
	HX_HCSTRING("radialEnd","\x3c","\x52","\xef","\xf6"),
	HX_HCSTRING("angleStart","\x8f","\xe3","\x90","\x87"),
	HX_HCSTRING("angleEnd","\xc8","\x5d","\x56","\x2b"),
	HX_HCSTRING("tween","\x6b","\xaa","\x70","\x19"),
	::String(null()) };

static void Cover_obj_sMarkStatics(HX_MARK_PARAMS) {
	HX_MARK_MEMBER_NAME(Cover_obj::__mClass,"__mClass");
};

#ifdef HXCPP_VISIT_ALLOCS
static void Cover_obj_sVisitStatics(HX_VISIT_PARAMS) {
	HX_VISIT_MEMBER_NAME(Cover_obj::__mClass,"__mClass");
};

#endif

hx::Class Cover_obj::__mClass;

void Cover_obj::__register()
{
	hx::Static(__mClass) = new hx::Class_obj();
	__mClass->mName = HX_HCSTRING("entity.Cover","\x8c","\x97","\x57","\xcb");
	__mClass->mSuper = &super::__SGetClass();
	__mClass->mConstructEmpty = &__CreateEmpty;
	__mClass->mConstructArgs = &__Create;
	__mClass->mGetStaticField = &hx::Class_obj::GetNoStaticField;
	__mClass->mSetStaticField = &hx::Class_obj::SetNoStaticField;
	__mClass->mMarkFunc = Cover_obj_sMarkStatics;
	__mClass->mStatics = hx::Class_obj::dupFunctions(0 /* sStaticFields */);
	__mClass->mMembers = hx::Class_obj::dupFunctions(Cover_obj_sMemberFields);
	__mClass->mCanCast = hx::TCanCast< Cover_obj >;
#ifdef HXCPP_VISIT_ALLOCS
	__mClass->mVisitFunc = Cover_obj_sVisitStatics;
#endif
#ifdef HXCPP_SCRIPTABLE
	__mClass->mMemberStorageInfo = Cover_obj_sMemberStorageInfo;
#endif
#ifdef HXCPP_SCRIPTABLE
	__mClass->mStaticStorageInfo = Cover_obj_sStaticStorageInfo;
#endif
	hx::_hx_RegisterClass(__mClass->mName, __mClass);
}

} // end namespace entity
