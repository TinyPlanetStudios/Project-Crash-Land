// Generated by Haxe 3.3.0
#include <hxcpp.h>

#ifndef INCLUDED_Global
#include <Global.h>
#endif
#ifndef INCLUDED_entity_Ladder
#include <entity/Ladder.h>
#endif
#ifndef INCLUDED_flixel_FlxBasic
#include <flixel/FlxBasic.h>
#endif
#ifndef INCLUDED_flixel_FlxObject
#include <flixel/FlxObject.h>
#endif
#ifndef INCLUDED_flixel_FlxSprite
#include <flixel/FlxSprite.h>
#endif
#ifndef INCLUDED_flixel_group_FlxTypedGroup
#include <flixel/group/FlxTypedGroup.h>
#endif
#ifndef INCLUDED_flixel_math_FlxPoint
#include <flixel/math/FlxPoint.h>
#endif
#ifndef INCLUDED_flixel_util_FlxPool_flixel_math_FlxPoint
#include <flixel/util/FlxPool_flixel_math_FlxPoint.h>
#endif
#ifndef INCLUDED_flixel_util_IFlxDestroyable
#include <flixel/util/IFlxDestroyable.h>
#endif
#ifndef INCLUDED_flixel_util_IFlxPool
#include <flixel/util/IFlxPool.h>
#endif
#ifndef INCLUDED_flixel_util_IFlxPooled
#include <flixel/util/IFlxPooled.h>
#endif

namespace entity{

void Ladder_obj::__construct(Float angleInp,Float radiala,Float radialb){
            	HX_STACK_FRAME("entity.Ladder","new",0x30ca9a5f,"entity.Ladder.new","entity/Ladder.hx",18,0x66f78dd0)
            	HX_STACK_THIS(this)
            	HX_STACK_ARG(angleInp,"angleInp")
            	HX_STACK_ARG(radiala,"radiala")
            	HX_STACK_ARG(radialb,"radialb")
HXLINE(  19)		super::__construct(null());
HXLINE(  20)		this->radialStart = radiala;
HXLINE(  21)		this->radialEnd = radialb;
HXLINE(  23)		this->Angle = (angleInp + (int)2);
HXLINE(  25)		HX_VARI( Float,a) = this->radialStart;
HXLINE(  27)		while(true){
HXLINE(  27)			Bool _hx_tmp;
HXDLIN(  27)			if ((a < this->radialEnd)) {
HXLINE(  27)				_hx_tmp = (a < ::Global_obj::Surface);
            			}
            			else {
HXLINE(  27)				_hx_tmp = false;
            			}
HXDLIN(  27)			if (!(_hx_tmp)) {
HXLINE(  27)				goto _hx_goto_0;
            			}
HXLINE(  29)			HX_VARI(  ::flixel::FlxSprite,holder) =  ::flixel::FlxSprite_obj::__new((int)0,(int)0,HX_("assets/images/rung.png",a2,20,36,a0));
HXLINE(  30)			Float _hx_tmp1 = holder->get_height();
HXDLIN(  30)			HX_VARI(  ::flixel::math::FlxPoint,Transform) =  ::flixel::math::FlxPoint_obj::__new((int)0,(a + ((Float)_hx_tmp1 / (Float)(int)2)));
HXLINE(  31)			HX_VARI(  ::flixel::math::FlxPoint,point) = ::flixel::math::FlxPoint_obj::_pool->get()->set((int)0,(int)0);
HXDLIN(  31)			point->_inPool = false;
HXDLIN(  31)			point->_weak = true;
HXDLIN(  31)			Transform->rotate(point,-(this->Angle));
HXLINE(  32)			Float _hx_tmp2 = (::Global_obj::PlanetPos->x - Transform->x);
HXDLIN(  32)			Float _hx_tmp3 = holder->get_width();
HXDLIN(  32)			Float _hx_tmp4 = (_hx_tmp2 - ((Float)_hx_tmp3 / (Float)(int)2));
HXDLIN(  32)			Float _hx_tmp5 = (::Global_obj::PlanetPos->y - Transform->y);
HXDLIN(  32)			Float _hx_tmp6 = holder->get_height();
HXDLIN(  32)			holder->setPosition(_hx_tmp4,(_hx_tmp5 - ((Float)_hx_tmp6 / (Float)(int)2)));
HXLINE(  33)			holder->set_angle(-(this->Angle));
HXLINE(  34)			this->add(holder);
HXLINE(  35)			hx::AddEq(a,(int)10);
            		}
            		_hx_goto_0:;
            	}

Dynamic Ladder_obj::__CreateEmpty() { return new Ladder_obj; }

hx::ObjectPtr< Ladder_obj > Ladder_obj::__new(Float angleInp,Float radiala,Float radialb)
{
	hx::ObjectPtr< Ladder_obj > _hx_result = new Ladder_obj();
	_hx_result->__construct(angleInp,radiala,radialb);
	return _hx_result;
}

Dynamic Ladder_obj::__Create(hx::DynamicArray inArgs)
{
	hx::ObjectPtr< Ladder_obj > _hx_result = new Ladder_obj();
	_hx_result->__construct(inArgs[0],inArgs[1],inArgs[2]);
	return _hx_result;
}


Ladder_obj::Ladder_obj()
{
}

hx::Val Ladder_obj::__Field(const ::String &inName,hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 5:
		if (HX_FIELD_EQ(inName,"Angle") ) { return hx::Val( Angle); }
		break;
	case 9:
		if (HX_FIELD_EQ(inName,"radialEnd") ) { return hx::Val( radialEnd); }
		break;
	case 11:
		if (HX_FIELD_EQ(inName,"radialStart") ) { return hx::Val( radialStart); }
	}
	return super::__Field(inName,inCallProp);
}

hx::Val Ladder_obj::__SetField(const ::String &inName,const hx::Val &inValue,hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 5:
		if (HX_FIELD_EQ(inName,"Angle") ) { Angle=inValue.Cast< Float >(); return inValue; }
		break;
	case 9:
		if (HX_FIELD_EQ(inName,"radialEnd") ) { radialEnd=inValue.Cast< Float >(); return inValue; }
		break;
	case 11:
		if (HX_FIELD_EQ(inName,"radialStart") ) { radialStart=inValue.Cast< Float >(); return inValue; }
	}
	return super::__SetField(inName,inValue,inCallProp);
}

void Ladder_obj::__GetFields(Array< ::String> &outFields)
{
	outFields->push(HX_HCSTRING("radialStart","\x03","\xdd","\xa6","\x22"));
	outFields->push(HX_HCSTRING("radialEnd","\x3c","\x52","\xef","\xf6"));
	outFields->push(HX_HCSTRING("Angle","\xb3","\xb3","\x0f","\xb6"));
	super::__GetFields(outFields);
};

#if HXCPP_SCRIPTABLE
static hx::StorageInfo Ladder_obj_sMemberStorageInfo[] = {
	{hx::fsFloat,(int)offsetof(Ladder_obj,radialStart),HX_HCSTRING("radialStart","\x03","\xdd","\xa6","\x22")},
	{hx::fsFloat,(int)offsetof(Ladder_obj,radialEnd),HX_HCSTRING("radialEnd","\x3c","\x52","\xef","\xf6")},
	{hx::fsFloat,(int)offsetof(Ladder_obj,Angle),HX_HCSTRING("Angle","\xb3","\xb3","\x0f","\xb6")},
	{ hx::fsUnknown, 0, null()}
};
static hx::StaticInfo *Ladder_obj_sStaticStorageInfo = 0;
#endif

static ::String Ladder_obj_sMemberFields[] = {
	HX_HCSTRING("radialStart","\x03","\xdd","\xa6","\x22"),
	HX_HCSTRING("radialEnd","\x3c","\x52","\xef","\xf6"),
	HX_HCSTRING("Angle","\xb3","\xb3","\x0f","\xb6"),
	::String(null()) };

static void Ladder_obj_sMarkStatics(HX_MARK_PARAMS) {
	HX_MARK_MEMBER_NAME(Ladder_obj::__mClass,"__mClass");
};

#ifdef HXCPP_VISIT_ALLOCS
static void Ladder_obj_sVisitStatics(HX_VISIT_PARAMS) {
	HX_VISIT_MEMBER_NAME(Ladder_obj::__mClass,"__mClass");
};

#endif

hx::Class Ladder_obj::__mClass;

void Ladder_obj::__register()
{
	hx::Static(__mClass) = new hx::Class_obj();
	__mClass->mName = HX_HCSTRING("entity.Ladder","\xed","\x7e","\x00","\x9f");
	__mClass->mSuper = &super::__SGetClass();
	__mClass->mConstructEmpty = &__CreateEmpty;
	__mClass->mConstructArgs = &__Create;
	__mClass->mGetStaticField = &hx::Class_obj::GetNoStaticField;
	__mClass->mSetStaticField = &hx::Class_obj::SetNoStaticField;
	__mClass->mMarkFunc = Ladder_obj_sMarkStatics;
	__mClass->mStatics = hx::Class_obj::dupFunctions(0 /* sStaticFields */);
	__mClass->mMembers = hx::Class_obj::dupFunctions(Ladder_obj_sMemberFields);
	__mClass->mCanCast = hx::TCanCast< Ladder_obj >;
#ifdef HXCPP_VISIT_ALLOCS
	__mClass->mVisitFunc = Ladder_obj_sVisitStatics;
#endif
#ifdef HXCPP_SCRIPTABLE
	__mClass->mMemberStorageInfo = Ladder_obj_sMemberStorageInfo;
#endif
#ifdef HXCPP_SCRIPTABLE
	__mClass->mStaticStorageInfo = Ladder_obj_sStaticStorageInfo;
#endif
	hx::_hx_RegisterClass(__mClass->mName, __mClass);
}

} // end namespace entity
