// Generated by Haxe 3.3.0
#include <hxcpp.h>

#ifndef INCLUDED_Global
#include <Global.h>
#endif
#ifndef INCLUDED_entity_Interactable
#include <entity/Interactable.h>
#endif
#ifndef INCLUDED_flixel_FlxBasic
#include <flixel/FlxBasic.h>
#endif
#ifndef INCLUDED_flixel_FlxG
#include <flixel/FlxG.h>
#endif
#ifndef INCLUDED_flixel_FlxGame
#include <flixel/FlxGame.h>
#endif
#ifndef INCLUDED_flixel_FlxObject
#include <flixel/FlxObject.h>
#endif
#ifndef INCLUDED_flixel_FlxSprite
#include <flixel/FlxSprite.h>
#endif
#ifndef INCLUDED_flixel_FlxState
#include <flixel/FlxState.h>
#endif
#ifndef INCLUDED_flixel_group_FlxTypedGroup
#include <flixel/group/FlxTypedGroup.h>
#endif
#ifndef INCLUDED_flixel_math_FlxPoint
#include <flixel/math/FlxPoint.h>
#endif
#ifndef INCLUDED_flixel_util_IFlxDestroyable
#include <flixel/util/IFlxDestroyable.h>
#endif
#ifndef INCLUDED_flixel_util_IFlxPooled
#include <flixel/util/IFlxPooled.h>
#endif
#ifndef INCLUDED_openfl__legacy_display_DisplayObject
#include <openfl/_legacy/display/DisplayObject.h>
#endif
#ifndef INCLUDED_openfl__legacy_display_DisplayObjectContainer
#include <openfl/_legacy/display/DisplayObjectContainer.h>
#endif
#ifndef INCLUDED_openfl__legacy_display_IBitmapDrawable
#include <openfl/_legacy/display/IBitmapDrawable.h>
#endif
#ifndef INCLUDED_openfl__legacy_display_InteractiveObject
#include <openfl/_legacy/display/InteractiveObject.h>
#endif
#ifndef INCLUDED_openfl__legacy_display_Sprite
#include <openfl/_legacy/display/Sprite.h>
#endif
#ifndef INCLUDED_openfl__legacy_events_EventDispatcher
#include <openfl/_legacy/events/EventDispatcher.h>
#endif
#ifndef INCLUDED_openfl__legacy_events_IEventDispatcher
#include <openfl/_legacy/events/IEventDispatcher.h>
#endif

namespace entity{

void Interactable_obj::__construct(hx::Null< Float >  __o_X,hx::Null< Float >  __o_Y, ::Dynamic SimpleGraphic,Float anglea,Float angleb,Float radiala,Float radialb, ::Dynamic callback){
Float X = __o_X.Default(0);
Float Y = __o_Y.Default(0);
            	HX_STACK_FRAME("entity.Interactable","new",0x97b6e30d,"entity.Interactable.new","entity/Interactable.hx",22,0x5d1b2622)
            	HX_STACK_THIS(this)
            	HX_STACK_ARG(X,"X")
            	HX_STACK_ARG(Y,"Y")
            	HX_STACK_ARG(SimpleGraphic,"SimpleGraphic")
            	HX_STACK_ARG(anglea,"anglea")
            	HX_STACK_ARG(angleb,"angleb")
            	HX_STACK_ARG(radiala,"radiala")
            	HX_STACK_ARG(radialb,"radialb")
            	HX_STACK_ARG(callback,"callback")
HXLINE(  23)		Float _hx_tmp = (::Global_obj::PlanetPos->x + X);
HXDLIN(  23)		Float _hx_tmp1 = (::Global_obj::PlanetPos->y + Y);
HXDLIN(  23)		super::__construct(_hx_tmp,_hx_tmp1,SimpleGraphic);
HXLINE(  24)		this->radialStart = radiala;
HXLINE(  25)		this->radialEnd = radialb;
HXLINE(  27)		this->angleStart = anglea;
HXLINE(  28)		this->angleEnd = angleb;
HXLINE(  30)		this->Callback = callback;
HXLINE(  32)		::flixel::FlxG_obj::game->_state->add(hx::ObjectPtr<OBJ_>(this)).StaticCast<  ::flixel::FlxBasic >();
            	}

Dynamic Interactable_obj::__CreateEmpty() { return new Interactable_obj; }

hx::ObjectPtr< Interactable_obj > Interactable_obj::__new(hx::Null< Float >  __o_X,hx::Null< Float >  __o_Y, ::Dynamic SimpleGraphic,Float anglea,Float angleb,Float radiala,Float radialb, ::Dynamic callback)
{
	hx::ObjectPtr< Interactable_obj > _hx_result = new Interactable_obj();
	_hx_result->__construct(__o_X,__o_Y,SimpleGraphic,anglea,angleb,radiala,radialb,callback);
	return _hx_result;
}

Dynamic Interactable_obj::__Create(hx::DynamicArray inArgs)
{
	hx::ObjectPtr< Interactable_obj > _hx_result = new Interactable_obj();
	_hx_result->__construct(inArgs[0],inArgs[1],inArgs[2],inArgs[3],inArgs[4],inArgs[5],inArgs[6],inArgs[7]);
	return _hx_result;
}


Interactable_obj::Interactable_obj()
{
}

void Interactable_obj::__Mark(HX_MARK_PARAMS)
{
	HX_MARK_BEGIN_CLASS(Interactable);
	HX_MARK_MEMBER_NAME(radialStart,"radialStart");
	HX_MARK_MEMBER_NAME(radialEnd,"radialEnd");
	HX_MARK_MEMBER_NAME(angleStart,"angleStart");
	HX_MARK_MEMBER_NAME(angleEnd,"angleEnd");
	HX_MARK_MEMBER_NAME(Callback,"Callback");
	 ::flixel::FlxSprite_obj::__Mark(HX_MARK_ARG);
	HX_MARK_END_CLASS();
}

void Interactable_obj::__Visit(HX_VISIT_PARAMS)
{
	HX_VISIT_MEMBER_NAME(radialStart,"radialStart");
	HX_VISIT_MEMBER_NAME(radialEnd,"radialEnd");
	HX_VISIT_MEMBER_NAME(angleStart,"angleStart");
	HX_VISIT_MEMBER_NAME(angleEnd,"angleEnd");
	HX_VISIT_MEMBER_NAME(Callback,"Callback");
	 ::flixel::FlxSprite_obj::__Visit(HX_VISIT_ARG);
}

hx::Val Interactable_obj::__Field(const ::String &inName,hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 8:
		if (HX_FIELD_EQ(inName,"angleEnd") ) { return hx::Val( angleEnd); }
		if (HX_FIELD_EQ(inName,"Callback") ) { return hx::Val( Callback); }
		break;
	case 9:
		if (HX_FIELD_EQ(inName,"radialEnd") ) { return hx::Val( radialEnd); }
		break;
	case 10:
		if (HX_FIELD_EQ(inName,"angleStart") ) { return hx::Val( angleStart); }
		break;
	case 11:
		if (HX_FIELD_EQ(inName,"radialStart") ) { return hx::Val( radialStart); }
	}
	return super::__Field(inName,inCallProp);
}

hx::Val Interactable_obj::__SetField(const ::String &inName,const hx::Val &inValue,hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 8:
		if (HX_FIELD_EQ(inName,"angleEnd") ) { angleEnd=inValue.Cast< Float >(); return inValue; }
		if (HX_FIELD_EQ(inName,"Callback") ) { Callback=inValue.Cast<  ::Dynamic >(); return inValue; }
		break;
	case 9:
		if (HX_FIELD_EQ(inName,"radialEnd") ) { radialEnd=inValue.Cast< Float >(); return inValue; }
		break;
	case 10:
		if (HX_FIELD_EQ(inName,"angleStart") ) { angleStart=inValue.Cast< Float >(); return inValue; }
		break;
	case 11:
		if (HX_FIELD_EQ(inName,"radialStart") ) { radialStart=inValue.Cast< Float >(); return inValue; }
	}
	return super::__SetField(inName,inValue,inCallProp);
}

void Interactable_obj::__GetFields(Array< ::String> &outFields)
{
	outFields->push(HX_HCSTRING("radialStart","\x03","\xdd","\xa6","\x22"));
	outFields->push(HX_HCSTRING("radialEnd","\x3c","\x52","\xef","\xf6"));
	outFields->push(HX_HCSTRING("angleStart","\x8f","\xe3","\x90","\x87"));
	outFields->push(HX_HCSTRING("angleEnd","\xc8","\x5d","\x56","\x2b"));
	super::__GetFields(outFields);
};

#if HXCPP_SCRIPTABLE
static hx::StorageInfo Interactable_obj_sMemberStorageInfo[] = {
	{hx::fsFloat,(int)offsetof(Interactable_obj,radialStart),HX_HCSTRING("radialStart","\x03","\xdd","\xa6","\x22")},
	{hx::fsFloat,(int)offsetof(Interactable_obj,radialEnd),HX_HCSTRING("radialEnd","\x3c","\x52","\xef","\xf6")},
	{hx::fsFloat,(int)offsetof(Interactable_obj,angleStart),HX_HCSTRING("angleStart","\x8f","\xe3","\x90","\x87")},
	{hx::fsFloat,(int)offsetof(Interactable_obj,angleEnd),HX_HCSTRING("angleEnd","\xc8","\x5d","\x56","\x2b")},
	{hx::fsObject /*Dynamic*/ ,(int)offsetof(Interactable_obj,Callback),HX_HCSTRING("Callback","\xe5","\x55","\xb8","\x58")},
	{ hx::fsUnknown, 0, null()}
};
static hx::StaticInfo *Interactable_obj_sStaticStorageInfo = 0;
#endif

static ::String Interactable_obj_sMemberFields[] = {
	HX_HCSTRING("radialStart","\x03","\xdd","\xa6","\x22"),
	HX_HCSTRING("radialEnd","\x3c","\x52","\xef","\xf6"),
	HX_HCSTRING("angleStart","\x8f","\xe3","\x90","\x87"),
	HX_HCSTRING("angleEnd","\xc8","\x5d","\x56","\x2b"),
	HX_HCSTRING("Callback","\xe5","\x55","\xb8","\x58"),
	::String(null()) };

static void Interactable_obj_sMarkStatics(HX_MARK_PARAMS) {
	HX_MARK_MEMBER_NAME(Interactable_obj::__mClass,"__mClass");
};

#ifdef HXCPP_VISIT_ALLOCS
static void Interactable_obj_sVisitStatics(HX_VISIT_PARAMS) {
	HX_VISIT_MEMBER_NAME(Interactable_obj::__mClass,"__mClass");
};

#endif

hx::Class Interactable_obj::__mClass;

void Interactable_obj::__register()
{
	hx::Static(__mClass) = new hx::Class_obj();
	__mClass->mName = HX_HCSTRING("entity.Interactable","\x9b","\x58","\x53","\x51");
	__mClass->mSuper = &super::__SGetClass();
	__mClass->mConstructEmpty = &__CreateEmpty;
	__mClass->mConstructArgs = &__Create;
	__mClass->mGetStaticField = &hx::Class_obj::GetNoStaticField;
	__mClass->mSetStaticField = &hx::Class_obj::SetNoStaticField;
	__mClass->mMarkFunc = Interactable_obj_sMarkStatics;
	__mClass->mStatics = hx::Class_obj::dupFunctions(0 /* sStaticFields */);
	__mClass->mMembers = hx::Class_obj::dupFunctions(Interactable_obj_sMemberFields);
	__mClass->mCanCast = hx::TCanCast< Interactable_obj >;
#ifdef HXCPP_VISIT_ALLOCS
	__mClass->mVisitFunc = Interactable_obj_sVisitStatics;
#endif
#ifdef HXCPP_SCRIPTABLE
	__mClass->mMemberStorageInfo = Interactable_obj_sMemberStorageInfo;
#endif
#ifdef HXCPP_SCRIPTABLE
	__mClass->mStaticStorageInfo = Interactable_obj_sStaticStorageInfo;
#endif
	hx::_hx_RegisterClass(__mClass->mName, __mClass);
}

} // end namespace entity
