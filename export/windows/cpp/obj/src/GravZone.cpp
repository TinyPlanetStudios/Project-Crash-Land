// Generated by Haxe 3.3.0
#include <hxcpp.h>

#ifndef INCLUDED_GravZone
#include <GravZone.h>
#endif


void GravZone_obj::__construct(Float anglea,Float angleb,Float radiala,Float radialb,Bool dropThrough,Bool lwall,Bool rwall,Bool ceil){
            	HX_STACK_FRAME("GravZone","new",0x1ba1813e,"GravZone.new","GravZone.hx",21,0x42b4eff2)
            	HX_STACK_THIS(this)
            	HX_STACK_ARG(anglea,"anglea")
            	HX_STACK_ARG(angleb,"angleb")
            	HX_STACK_ARG(radiala,"radiala")
            	HX_STACK_ARG(radialb,"radialb")
            	HX_STACK_ARG(dropThrough,"dropThrough")
            	HX_STACK_ARG(lwall,"lwall")
            	HX_STACK_ARG(rwall,"rwall")
            	HX_STACK_ARG(ceil,"ceil")
HXLINE(  22)		this->radialStart = radiala;
HXLINE(  23)		this->radialEnd = radialb;
HXLINE(  25)		this->angleStart = anglea;
HXLINE(  26)		this->angleEnd = angleb;
HXLINE(  28)		this->DropThrough = dropThrough;
HXLINE(  29)		this->LeftWall = lwall;
HXLINE(  30)		this->RightWall = rwall;
HXLINE(  31)		this->Ceiling = ceil;
            	}

Dynamic GravZone_obj::__CreateEmpty() { return new GravZone_obj; }

hx::ObjectPtr< GravZone_obj > GravZone_obj::__new(Float anglea,Float angleb,Float radiala,Float radialb,Bool dropThrough,Bool lwall,Bool rwall,Bool ceil)
{
	hx::ObjectPtr< GravZone_obj > _hx_result = new GravZone_obj();
	_hx_result->__construct(anglea,angleb,radiala,radialb,dropThrough,lwall,rwall,ceil);
	return _hx_result;
}

Dynamic GravZone_obj::__Create(hx::DynamicArray inArgs)
{
	hx::ObjectPtr< GravZone_obj > _hx_result = new GravZone_obj();
	_hx_result->__construct(inArgs[0],inArgs[1],inArgs[2],inArgs[3],inArgs[4],inArgs[5],inArgs[6],inArgs[7]);
	return _hx_result;
}


GravZone_obj::GravZone_obj()
{
}

hx::Val GravZone_obj::__Field(const ::String &inName,hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 7:
		if (HX_FIELD_EQ(inName,"Ceiling") ) { return hx::Val( Ceiling); }
		break;
	case 8:
		if (HX_FIELD_EQ(inName,"angleEnd") ) { return hx::Val( angleEnd); }
		if (HX_FIELD_EQ(inName,"LeftWall") ) { return hx::Val( LeftWall); }
		break;
	case 9:
		if (HX_FIELD_EQ(inName,"radialEnd") ) { return hx::Val( radialEnd); }
		if (HX_FIELD_EQ(inName,"RightWall") ) { return hx::Val( RightWall); }
		break;
	case 10:
		if (HX_FIELD_EQ(inName,"angleStart") ) { return hx::Val( angleStart); }
		break;
	case 11:
		if (HX_FIELD_EQ(inName,"radialStart") ) { return hx::Val( radialStart); }
		if (HX_FIELD_EQ(inName,"DropThrough") ) { return hx::Val( DropThrough); }
	}
	return super::__Field(inName,inCallProp);
}

hx::Val GravZone_obj::__SetField(const ::String &inName,const hx::Val &inValue,hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 7:
		if (HX_FIELD_EQ(inName,"Ceiling") ) { Ceiling=inValue.Cast< Bool >(); return inValue; }
		break;
	case 8:
		if (HX_FIELD_EQ(inName,"angleEnd") ) { angleEnd=inValue.Cast< Float >(); return inValue; }
		if (HX_FIELD_EQ(inName,"LeftWall") ) { LeftWall=inValue.Cast< Bool >(); return inValue; }
		break;
	case 9:
		if (HX_FIELD_EQ(inName,"radialEnd") ) { radialEnd=inValue.Cast< Float >(); return inValue; }
		if (HX_FIELD_EQ(inName,"RightWall") ) { RightWall=inValue.Cast< Bool >(); return inValue; }
		break;
	case 10:
		if (HX_FIELD_EQ(inName,"angleStart") ) { angleStart=inValue.Cast< Float >(); return inValue; }
		break;
	case 11:
		if (HX_FIELD_EQ(inName,"radialStart") ) { radialStart=inValue.Cast< Float >(); return inValue; }
		if (HX_FIELD_EQ(inName,"DropThrough") ) { DropThrough=inValue.Cast< Bool >(); return inValue; }
	}
	return super::__SetField(inName,inValue,inCallProp);
}

void GravZone_obj::__GetFields(Array< ::String> &outFields)
{
	outFields->push(HX_HCSTRING("radialStart","\x03","\xdd","\xa6","\x22"));
	outFields->push(HX_HCSTRING("radialEnd","\x3c","\x52","\xef","\xf6"));
	outFields->push(HX_HCSTRING("angleStart","\x8f","\xe3","\x90","\x87"));
	outFields->push(HX_HCSTRING("angleEnd","\xc8","\x5d","\x56","\x2b"));
	outFields->push(HX_HCSTRING("DropThrough","\xb6","\xc3","\x8a","\x80"));
	outFields->push(HX_HCSTRING("LeftWall","\xd1","\x5c","\x9f","\x2f"));
	outFields->push(HX_HCSTRING("RightWall","\xe6","\x92","\x8b","\x5b"));
	outFields->push(HX_HCSTRING("Ceiling","\xdd","\x86","\xef","\x00"));
	super::__GetFields(outFields);
};

#if HXCPP_SCRIPTABLE
static hx::StorageInfo GravZone_obj_sMemberStorageInfo[] = {
	{hx::fsFloat,(int)offsetof(GravZone_obj,radialStart),HX_HCSTRING("radialStart","\x03","\xdd","\xa6","\x22")},
	{hx::fsFloat,(int)offsetof(GravZone_obj,radialEnd),HX_HCSTRING("radialEnd","\x3c","\x52","\xef","\xf6")},
	{hx::fsFloat,(int)offsetof(GravZone_obj,angleStart),HX_HCSTRING("angleStart","\x8f","\xe3","\x90","\x87")},
	{hx::fsFloat,(int)offsetof(GravZone_obj,angleEnd),HX_HCSTRING("angleEnd","\xc8","\x5d","\x56","\x2b")},
	{hx::fsBool,(int)offsetof(GravZone_obj,DropThrough),HX_HCSTRING("DropThrough","\xb6","\xc3","\x8a","\x80")},
	{hx::fsBool,(int)offsetof(GravZone_obj,LeftWall),HX_HCSTRING("LeftWall","\xd1","\x5c","\x9f","\x2f")},
	{hx::fsBool,(int)offsetof(GravZone_obj,RightWall),HX_HCSTRING("RightWall","\xe6","\x92","\x8b","\x5b")},
	{hx::fsBool,(int)offsetof(GravZone_obj,Ceiling),HX_HCSTRING("Ceiling","\xdd","\x86","\xef","\x00")},
	{ hx::fsUnknown, 0, null()}
};
static hx::StaticInfo *GravZone_obj_sStaticStorageInfo = 0;
#endif

static ::String GravZone_obj_sMemberFields[] = {
	HX_HCSTRING("radialStart","\x03","\xdd","\xa6","\x22"),
	HX_HCSTRING("radialEnd","\x3c","\x52","\xef","\xf6"),
	HX_HCSTRING("angleStart","\x8f","\xe3","\x90","\x87"),
	HX_HCSTRING("angleEnd","\xc8","\x5d","\x56","\x2b"),
	HX_HCSTRING("DropThrough","\xb6","\xc3","\x8a","\x80"),
	HX_HCSTRING("LeftWall","\xd1","\x5c","\x9f","\x2f"),
	HX_HCSTRING("RightWall","\xe6","\x92","\x8b","\x5b"),
	HX_HCSTRING("Ceiling","\xdd","\x86","\xef","\x00"),
	::String(null()) };

static void GravZone_obj_sMarkStatics(HX_MARK_PARAMS) {
	HX_MARK_MEMBER_NAME(GravZone_obj::__mClass,"__mClass");
};

#ifdef HXCPP_VISIT_ALLOCS
static void GravZone_obj_sVisitStatics(HX_VISIT_PARAMS) {
	HX_VISIT_MEMBER_NAME(GravZone_obj::__mClass,"__mClass");
};

#endif

hx::Class GravZone_obj::__mClass;

void GravZone_obj::__register()
{
	hx::Static(__mClass) = new hx::Class_obj();
	__mClass->mName = HX_HCSTRING("GravZone","\x4c","\xca","\x44","\x57");
	__mClass->mSuper = &super::__SGetClass();
	__mClass->mConstructEmpty = &__CreateEmpty;
	__mClass->mConstructArgs = &__Create;
	__mClass->mGetStaticField = &hx::Class_obj::GetNoStaticField;
	__mClass->mSetStaticField = &hx::Class_obj::SetNoStaticField;
	__mClass->mMarkFunc = GravZone_obj_sMarkStatics;
	__mClass->mStatics = hx::Class_obj::dupFunctions(0 /* sStaticFields */);
	__mClass->mMembers = hx::Class_obj::dupFunctions(GravZone_obj_sMemberFields);
	__mClass->mCanCast = hx::TCanCast< GravZone_obj >;
#ifdef HXCPP_VISIT_ALLOCS
	__mClass->mVisitFunc = GravZone_obj_sVisitStatics;
#endif
#ifdef HXCPP_SCRIPTABLE
	__mClass->mMemberStorageInfo = GravZone_obj_sMemberStorageInfo;
#endif
#ifdef HXCPP_SCRIPTABLE
	__mClass->mStaticStorageInfo = GravZone_obj_sStaticStorageInfo;
#endif
	hx::_hx_RegisterClass(__mClass->mName, __mClass);
}

