// Generated by Haxe 3.3.0
#include <hxcpp.h>

#ifndef INCLUDED_CodeDoorKeypad
#include <CodeDoorKeypad.h>
#endif
#ifndef INCLUDED_Global
#include <Global.h>
#endif
#ifndef INCLUDED_flixel_FlxBasic
#include <flixel/FlxBasic.h>
#endif
#ifndef INCLUDED_flixel_FlxG
#include <flixel/FlxG.h>
#endif
#ifndef INCLUDED_flixel_FlxObject
#include <flixel/FlxObject.h>
#endif
#ifndef INCLUDED_flixel_FlxSprite
#include <flixel/FlxSprite.h>
#endif
#ifndef INCLUDED_flixel_FlxState
#include <flixel/FlxState.h>
#endif
#ifndef INCLUDED_flixel_FlxSubState
#include <flixel/FlxSubState.h>
#endif
#ifndef INCLUDED_flixel_group_FlxTypedGroup
#include <flixel/group/FlxTypedGroup.h>
#endif
#ifndef INCLUDED_flixel_input_FlxInput
#include <flixel/input/FlxInput.h>
#endif
#ifndef INCLUDED_flixel_input_FlxPointer
#include <flixel/input/FlxPointer.h>
#endif
#ifndef INCLUDED_flixel_input_IFlxInput
#include <flixel/input/IFlxInput.h>
#endif
#ifndef INCLUDED_flixel_input_IFlxInputManager
#include <flixel/input/IFlxInputManager.h>
#endif
#ifndef INCLUDED_flixel_input_mouse_FlxMouse
#include <flixel/input/mouse/FlxMouse.h>
#endif
#ifndef INCLUDED_flixel_input_mouse_FlxMouseButton
#include <flixel/input/mouse/FlxMouseButton.h>
#endif
#ifndef INCLUDED_flixel_math_FlxPoint
#include <flixel/math/FlxPoint.h>
#endif
#ifndef INCLUDED_flixel_util_IFlxDestroyable
#include <flixel/util/IFlxDestroyable.h>
#endif
#ifndef INCLUDED_flixel_util_IFlxPooled
#include <flixel/util/IFlxPooled.h>
#endif
#ifndef INCLUDED_flixel_util__FlxColor_FlxColor_Impl_
#include <flixel/util/_FlxColor/FlxColor_Impl_.h>
#endif


void CodeDoorKeypad_obj::__construct( ::flixel::FlxState parent){
            	HX_STACK_FRAME("CodeDoorKeypad","new",0x4c399941,"CodeDoorKeypad.new","CodeDoorKeypad.hx",25,0x1873094f)
            	HX_STACK_THIS(this)
            	HX_STACK_ARG(parent,"parent")
HXLINE(  26)		HX_VARI( Int,color) = ::flixel::util::_FlxColor::FlxColor_Impl__obj::_new(null());
HXDLIN(  26)		{
HXLINE(  26)			hx::AndEq(color,(int)-16711681);
HXDLIN(  26)			hx::OrEq(color,(int)393216);
            		}
HXDLIN(  26)		{
HXLINE(  26)			hx::AndEq(color,(int)-65281);
HXDLIN(  26)			hx::OrEq(color,(int)0);
            		}
HXDLIN(  26)		{
HXLINE(  26)			hx::AndEq(color,(int)-256);
HXDLIN(  26)			hx::OrEq(color,(int)42);
            		}
HXDLIN(  26)		{
HXLINE(  26)			hx::AndEq(color,(int)16777215);
HXDLIN(  26)			hx::OrEq(color,(int)-16777216);
            		}
HXDLIN(  26)		super::__construct(color);
HXLINE(  27)		this->Background =  ::flixel::FlxSprite_obj::__new((int)0,(int)0,HX_("assets/images/keypad.png",ba,47,e3,7d));
HXLINE(  28)		this->add(this->Background);
HXLINE(  30)		this->Parent = parent;
HXLINE(  32)		this->Yep1 =  ::flixel::FlxSprite_obj::__new((int)388,(int)63,null());
HXLINE(  33)		this->Yep1->makeGraphic((int)104,(int)41,(int)-16711936,null(),null());
HXLINE(  34)		this->Yep1->set_visible(false);
HXLINE(  35)		this->add(this->Yep1);
HXLINE(  36)		this->Yep2 =  ::flixel::FlxSprite_obj::__new((int)531,(int)63,null());
HXLINE(  37)		this->Yep2->makeGraphic((int)104,(int)41,(int)-16711936,null(),null());
HXLINE(  38)		this->Yep2->set_visible(false);
HXLINE(  39)		this->add(this->Yep2);
HXLINE(  40)		this->Yep3 =  ::flixel::FlxSprite_obj::__new((int)670,(int)63,null());
HXLINE(  41)		this->Yep3->makeGraphic((int)104,(int)41,(int)-16711936,null(),null());
HXLINE(  42)		this->Yep3->set_visible(false);
HXLINE(  43)		this->add(this->Yep3);
HXLINE(  44)		this->Yep4 =  ::flixel::FlxSprite_obj::__new((int)802,(int)63,null());
HXLINE(  45)		this->Yep4->makeGraphic((int)104,(int)41,(int)-16711936,null(),null());
HXLINE(  46)		this->Yep4->set_visible(false);
HXLINE(  47)		this->add(this->Yep4);
            	}

Dynamic CodeDoorKeypad_obj::__CreateEmpty() { return new CodeDoorKeypad_obj; }

hx::ObjectPtr< CodeDoorKeypad_obj > CodeDoorKeypad_obj::__new( ::flixel::FlxState parent)
{
	hx::ObjectPtr< CodeDoorKeypad_obj > _hx_result = new CodeDoorKeypad_obj();
	_hx_result->__construct(parent);
	return _hx_result;
}

Dynamic CodeDoorKeypad_obj::__Create(hx::DynamicArray inArgs)
{
	hx::ObjectPtr< CodeDoorKeypad_obj > _hx_result = new CodeDoorKeypad_obj();
	_hx_result->__construct(inArgs[0]);
	return _hx_result;
}

void CodeDoorKeypad_obj::update(Float elapsed){
            	HX_STACK_FRAME("CodeDoorKeypad","update",0xbfa5bfc8,"CodeDoorKeypad.update","CodeDoorKeypad.hx",51,0x1873094f)
            	HX_STACK_THIS(this)
            	HX_STACK_ARG(elapsed,"elapsed")
HXLINE(  52)		Bool _hx_tmp = (::flixel::FlxG_obj::mouse->_leftButton->current == (int)2);
HXDLIN(  52)		if (_hx_tmp) {
HXLINE(  54)			Bool _hx_tmp1;
HXDLIN(  54)			Bool _hx_tmp2;
HXDLIN(  54)			Bool _hx_tmp3;
HXDLIN(  54)			Bool _hx_tmp4 = (::flixel::FlxG_obj::mouse->getPosition(null())->x > (int)373);
HXDLIN(  54)			if (_hx_tmp4) {
HXLINE(  54)				_hx_tmp3 = (::flixel::FlxG_obj::mouse->getPosition(null())->x < (int)503);
            			}
            			else {
HXLINE(  54)				_hx_tmp3 = false;
            			}
HXDLIN(  54)			if (_hx_tmp3) {
HXLINE(  54)				_hx_tmp2 = (::flixel::FlxG_obj::mouse->getPosition(null())->y > (int)129);
            			}
            			else {
HXLINE(  54)				_hx_tmp2 = false;
            			}
HXDLIN(  54)			if (_hx_tmp2) {
HXLINE(  54)				_hx_tmp1 = (::flixel::FlxG_obj::mouse->getPosition(null())->y < (int)290);
            			}
            			else {
HXLINE(  54)				_hx_tmp1 = false;
            			}
HXDLIN(  54)			if (_hx_tmp1) {
HXLINE(  57)				this->Yep1->set_visible(false);
HXLINE(  58)				this->Yep2->set_visible(false);
HXLINE(  59)				this->Yep3->set_visible(false);
HXLINE(  60)				this->Yep4->set_visible(false);
            			}
            			else {
HXLINE(  62)				Bool _hx_tmp5;
HXDLIN(  62)				Bool _hx_tmp6;
HXDLIN(  62)				Bool _hx_tmp7;
HXDLIN(  62)				Bool _hx_tmp8 = (::flixel::FlxG_obj::mouse->getPosition(null())->x > (int)562);
HXDLIN(  62)				if (_hx_tmp8) {
HXLINE(  62)					_hx_tmp7 = (::flixel::FlxG_obj::mouse->getPosition(null())->x < (int)690);
            				}
            				else {
HXLINE(  62)					_hx_tmp7 = false;
            				}
HXDLIN(  62)				if (_hx_tmp7) {
HXLINE(  62)					_hx_tmp6 = (::flixel::FlxG_obj::mouse->getPosition(null())->y > (int)129);
            				}
            				else {
HXLINE(  62)					_hx_tmp6 = false;
            				}
HXDLIN(  62)				if (_hx_tmp6) {
HXLINE(  62)					_hx_tmp5 = (::flixel::FlxG_obj::mouse->getPosition(null())->y < (int)290);
            				}
            				else {
HXLINE(  62)					_hx_tmp5 = false;
            				}
HXDLIN(  62)				if (_hx_tmp5) {
HXLINE(  65)					Bool _hx_tmp9;
HXDLIN(  65)					if ((this->Yep1->visible == true)) {
HXLINE(  65)						_hx_tmp9 = (this->Yep2->visible == false);
            					}
            					else {
HXLINE(  65)						_hx_tmp9 = false;
            					}
HXDLIN(  65)					if (_hx_tmp9) {
HXLINE(  67)						this->Yep2->set_visible(true);
            					}
            					else {
HXLINE(  71)						this->Yep1->set_visible(false);
HXLINE(  72)						this->Yep2->set_visible(false);
HXLINE(  73)						this->Yep3->set_visible(false);
HXLINE(  74)						this->Yep4->set_visible(false);
            					}
            				}
            				else {
HXLINE(  77)					Bool _hx_tmp10;
HXDLIN(  77)					Bool _hx_tmp11;
HXDLIN(  77)					Bool _hx_tmp12;
HXDLIN(  77)					Bool _hx_tmp13 = (::flixel::FlxG_obj::mouse->getPosition(null())->x > (int)745);
HXDLIN(  77)					if (_hx_tmp13) {
HXLINE(  77)						_hx_tmp12 = (::flixel::FlxG_obj::mouse->getPosition(null())->x < (int)915);
            					}
            					else {
HXLINE(  77)						_hx_tmp12 = false;
            					}
HXDLIN(  77)					if (_hx_tmp12) {
HXLINE(  77)						_hx_tmp11 = (::flixel::FlxG_obj::mouse->getPosition(null())->y > (int)129);
            					}
            					else {
HXLINE(  77)						_hx_tmp11 = false;
            					}
HXDLIN(  77)					if (_hx_tmp11) {
HXLINE(  77)						_hx_tmp10 = (::flixel::FlxG_obj::mouse->getPosition(null())->y < (int)290);
            					}
            					else {
HXLINE(  77)						_hx_tmp10 = false;
            					}
HXDLIN(  77)					if (_hx_tmp10) {
HXLINE(  80)						Bool _hx_tmp14;
HXDLIN(  80)						if ((this->Yep2->visible == true)) {
HXLINE(  80)							_hx_tmp14 = (this->Yep3->visible == false);
            						}
            						else {
HXLINE(  80)							_hx_tmp14 = false;
            						}
HXDLIN(  80)						if (_hx_tmp14) {
HXLINE(  82)							this->Yep3->set_visible(true);
            						}
            						else {
HXLINE(  86)							this->Yep1->set_visible(false);
HXLINE(  87)							this->Yep2->set_visible(false);
HXLINE(  88)							this->Yep3->set_visible(false);
HXLINE(  89)							this->Yep4->set_visible(false);
            						}
            					}
            					else {
HXLINE(  93)						Bool _hx_tmp15;
HXDLIN(  93)						Bool _hx_tmp16;
HXDLIN(  93)						Bool _hx_tmp17;
HXDLIN(  93)						Bool _hx_tmp18 = (::flixel::FlxG_obj::mouse->getPosition(null())->x > (int)373);
HXDLIN(  93)						if (_hx_tmp18) {
HXLINE(  93)							_hx_tmp17 = (::flixel::FlxG_obj::mouse->getPosition(null())->x < (int)545);
            						}
            						else {
HXLINE(  93)							_hx_tmp17 = false;
            						}
HXDLIN(  93)						if (_hx_tmp17) {
HXLINE(  93)							_hx_tmp16 = (::flixel::FlxG_obj::mouse->getPosition(null())->y > (int)310);
            						}
            						else {
HXLINE(  93)							_hx_tmp16 = false;
            						}
HXDLIN(  93)						if (_hx_tmp16) {
HXLINE(  93)							_hx_tmp15 = (::flixel::FlxG_obj::mouse->getPosition(null())->y < (int)470);
            						}
            						else {
HXLINE(  93)							_hx_tmp15 = false;
            						}
HXDLIN(  93)						if (_hx_tmp15) {
HXLINE(  96)							this->Yep1->set_visible(false);
HXLINE(  97)							this->Yep2->set_visible(false);
HXLINE(  98)							this->Yep3->set_visible(false);
HXLINE(  99)							this->Yep4->set_visible(false);
            						}
            						else {
HXLINE( 101)							Bool _hx_tmp19;
HXDLIN( 101)							Bool _hx_tmp20;
HXDLIN( 101)							Bool _hx_tmp21;
HXDLIN( 101)							Bool _hx_tmp22 = (::flixel::FlxG_obj::mouse->getPosition(null())->x > (int)562);
HXDLIN( 101)							if (_hx_tmp22) {
HXLINE( 101)								_hx_tmp21 = (::flixel::FlxG_obj::mouse->getPosition(null())->x < (int)732);
            							}
            							else {
HXLINE( 101)								_hx_tmp21 = false;
            							}
HXDLIN( 101)							if (_hx_tmp21) {
HXLINE( 101)								_hx_tmp20 = (::flixel::FlxG_obj::mouse->getPosition(null())->y > (int)310);
            							}
            							else {
HXLINE( 101)								_hx_tmp20 = false;
            							}
HXDLIN( 101)							if (_hx_tmp20) {
HXLINE( 101)								_hx_tmp19 = (::flixel::FlxG_obj::mouse->getPosition(null())->y < (int)470);
            							}
            							else {
HXLINE( 101)								_hx_tmp19 = false;
            							}
HXDLIN( 101)							if (_hx_tmp19) {
HXLINE( 104)								Bool _hx_tmp23 = (this->Yep1->visible == false);
HXDLIN( 104)								if (_hx_tmp23) {
HXLINE( 106)									this->Yep1->set_visible(true);
            								}
            								else {
HXLINE( 110)									this->Yep1->set_visible(false);
HXLINE( 111)									this->Yep2->set_visible(false);
HXLINE( 112)									this->Yep3->set_visible(false);
HXLINE( 113)									this->Yep4->set_visible(false);
            								}
            							}
            							else {
HXLINE( 116)								Bool _hx_tmp24;
HXDLIN( 116)								Bool _hx_tmp25;
HXDLIN( 116)								Bool _hx_tmp26;
HXDLIN( 116)								Bool _hx_tmp27 = (::flixel::FlxG_obj::mouse->getPosition(null())->x > (int)745);
HXDLIN( 116)								if (_hx_tmp27) {
HXLINE( 116)									_hx_tmp26 = (::flixel::FlxG_obj::mouse->getPosition(null())->x < (int)915);
            								}
            								else {
HXLINE( 116)									_hx_tmp26 = false;
            								}
HXDLIN( 116)								if (_hx_tmp26) {
HXLINE( 116)									_hx_tmp25 = (::flixel::FlxG_obj::mouse->getPosition(null())->y > (int)310);
            								}
            								else {
HXLINE( 116)									_hx_tmp25 = false;
            								}
HXDLIN( 116)								if (_hx_tmp25) {
HXLINE( 116)									_hx_tmp24 = (::flixel::FlxG_obj::mouse->getPosition(null())->y < (int)470);
            								}
            								else {
HXLINE( 116)									_hx_tmp24 = false;
            								}
HXDLIN( 116)								if (_hx_tmp24) {
HXLINE( 119)									this->Yep1->set_visible(false);
HXLINE( 120)									this->Yep2->set_visible(false);
HXLINE( 121)									this->Yep3->set_visible(false);
HXLINE( 122)									this->Yep4->set_visible(false);
            								}
            								else {
HXLINE( 125)									Bool _hx_tmp28;
HXDLIN( 125)									Bool _hx_tmp29;
HXDLIN( 125)									Bool _hx_tmp30;
HXDLIN( 125)									Bool _hx_tmp31 = (::flixel::FlxG_obj::mouse->getPosition(null())->x > (int)373);
HXDLIN( 125)									if (_hx_tmp31) {
HXLINE( 125)										_hx_tmp30 = (::flixel::FlxG_obj::mouse->getPosition(null())->x < (int)545);
            									}
            									else {
HXLINE( 125)										_hx_tmp30 = false;
            									}
HXDLIN( 125)									if (_hx_tmp30) {
HXLINE( 125)										_hx_tmp29 = (::flixel::FlxG_obj::mouse->getPosition(null())->y > (int)493);
            									}
            									else {
HXLINE( 125)										_hx_tmp29 = false;
            									}
HXDLIN( 125)									if (_hx_tmp29) {
HXLINE( 125)										_hx_tmp28 = (::flixel::FlxG_obj::mouse->getPosition(null())->y < (int)560);
            									}
            									else {
HXLINE( 125)										_hx_tmp28 = false;
            									}
HXDLIN( 125)									if (_hx_tmp28) {
HXLINE( 128)										this->Yep1->set_visible(false);
HXLINE( 129)										this->Yep2->set_visible(false);
HXLINE( 130)										this->Yep3->set_visible(false);
HXLINE( 131)										this->Yep4->set_visible(false);
            									}
            									else {
HXLINE( 133)										Bool _hx_tmp32;
HXDLIN( 133)										Bool _hx_tmp33;
HXDLIN( 133)										Bool _hx_tmp34;
HXDLIN( 133)										Bool _hx_tmp35 = (::flixel::FlxG_obj::mouse->getPosition(null())->x > (int)562);
HXDLIN( 133)										if (_hx_tmp35) {
HXLINE( 133)											_hx_tmp34 = (::flixel::FlxG_obj::mouse->getPosition(null())->x < (int)730);
            										}
            										else {
HXLINE( 133)											_hx_tmp34 = false;
            										}
HXDLIN( 133)										if (_hx_tmp34) {
HXLINE( 133)											_hx_tmp33 = (::flixel::FlxG_obj::mouse->getPosition(null())->y > (int)493);
            										}
            										else {
HXLINE( 133)											_hx_tmp33 = false;
            										}
HXDLIN( 133)										if (_hx_tmp33) {
HXLINE( 133)											_hx_tmp32 = (::flixel::FlxG_obj::mouse->getPosition(null())->y < (int)560);
            										}
            										else {
HXLINE( 133)											_hx_tmp32 = false;
            										}
HXDLIN( 133)										if (_hx_tmp32) {
HXLINE( 136)											this->Yep1->set_visible(false);
HXLINE( 137)											this->Yep2->set_visible(false);
HXLINE( 138)											this->Yep3->set_visible(false);
HXLINE( 139)											this->Yep4->set_visible(false);
            										}
            										else {
HXLINE( 141)											Bool _hx_tmp36;
HXDLIN( 141)											Bool _hx_tmp37;
HXDLIN( 141)											Bool _hx_tmp38;
HXDLIN( 141)											Bool _hx_tmp39 = (::flixel::FlxG_obj::mouse->getPosition(null())->x > (int)745);
HXDLIN( 141)											if (_hx_tmp39) {
HXLINE( 141)												_hx_tmp38 = (::flixel::FlxG_obj::mouse->getPosition(null())->x < (int)915);
            											}
            											else {
HXLINE( 141)												_hx_tmp38 = false;
            											}
HXDLIN( 141)											if (_hx_tmp38) {
HXLINE( 141)												_hx_tmp37 = (::flixel::FlxG_obj::mouse->getPosition(null())->y > (int)493);
            											}
            											else {
HXLINE( 141)												_hx_tmp37 = false;
            											}
HXDLIN( 141)											if (_hx_tmp37) {
HXLINE( 141)												_hx_tmp36 = (::flixel::FlxG_obj::mouse->getPosition(null())->y < (int)660);
            											}
            											else {
HXLINE( 141)												_hx_tmp36 = false;
            											}
HXDLIN( 141)											if (_hx_tmp36) {
HXLINE( 144)												Bool _hx_tmp40;
HXDLIN( 144)												if ((this->Yep3->visible == true)) {
HXLINE( 144)													_hx_tmp40 = (this->Yep4->visible == false);
            												}
            												else {
HXLINE( 144)													_hx_tmp40 = false;
            												}
HXDLIN( 144)												if (_hx_tmp40) {
HXLINE( 146)													this->Yep4->set_visible(true);
            												}
            												else {
HXLINE( 150)													this->Yep1->set_visible(false);
HXLINE( 151)													this->Yep2->set_visible(false);
HXLINE( 152)													this->Yep3->set_visible(false);
HXLINE( 153)													this->Yep4->set_visible(false);
            												}
            											}
            										}
            									}
            								}
            							}
            						}
            					}
            				}
            			}
HXLINE( 157)			Bool _hx_tmp41;
HXDLIN( 157)			Bool _hx_tmp42;
HXDLIN( 157)			Bool _hx_tmp43;
HXDLIN( 157)			if (this->Yep1->visible) {
HXLINE( 157)				_hx_tmp43 = this->Yep2->visible;
            			}
            			else {
HXLINE( 157)				_hx_tmp43 = false;
            			}
HXDLIN( 157)			if (_hx_tmp43) {
HXLINE( 157)				_hx_tmp42 = this->Yep3->visible;
            			}
            			else {
HXLINE( 157)				_hx_tmp42 = false;
            			}
HXDLIN( 157)			if (_hx_tmp42) {
HXLINE( 157)				_hx_tmp41 = this->Yep4->visible;
            			}
            			else {
HXLINE( 157)				_hx_tmp41 = false;
            			}
HXDLIN( 157)			if (_hx_tmp41) {
HXLINE( 159)				this->Parent->persistentUpdate = true;
HXLINE( 160)				::Global_obj::CodeDoorJustOpened = true;
HXLINE( 161)				this->close();
            			}
            		}
HXLINE( 164)		this->super::update(elapsed);
            	}



CodeDoorKeypad_obj::CodeDoorKeypad_obj()
{
}

void CodeDoorKeypad_obj::__Mark(HX_MARK_PARAMS)
{
	HX_MARK_BEGIN_CLASS(CodeDoorKeypad);
	HX_MARK_MEMBER_NAME(Background,"Background");
	HX_MARK_MEMBER_NAME(Yep1,"Yep1");
	HX_MARK_MEMBER_NAME(Yep2,"Yep2");
	HX_MARK_MEMBER_NAME(Yep3,"Yep3");
	HX_MARK_MEMBER_NAME(Yep4,"Yep4");
	HX_MARK_MEMBER_NAME(Parent,"Parent");
	 ::flixel::FlxSubState_obj::__Mark(HX_MARK_ARG);
	HX_MARK_END_CLASS();
}

void CodeDoorKeypad_obj::__Visit(HX_VISIT_PARAMS)
{
	HX_VISIT_MEMBER_NAME(Background,"Background");
	HX_VISIT_MEMBER_NAME(Yep1,"Yep1");
	HX_VISIT_MEMBER_NAME(Yep2,"Yep2");
	HX_VISIT_MEMBER_NAME(Yep3,"Yep3");
	HX_VISIT_MEMBER_NAME(Yep4,"Yep4");
	HX_VISIT_MEMBER_NAME(Parent,"Parent");
	 ::flixel::FlxSubState_obj::__Visit(HX_VISIT_ARG);
}

hx::Val CodeDoorKeypad_obj::__Field(const ::String &inName,hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 4:
		if (HX_FIELD_EQ(inName,"Yep1") ) { return hx::Val( Yep1); }
		if (HX_FIELD_EQ(inName,"Yep2") ) { return hx::Val( Yep2); }
		if (HX_FIELD_EQ(inName,"Yep3") ) { return hx::Val( Yep3); }
		if (HX_FIELD_EQ(inName,"Yep4") ) { return hx::Val( Yep4); }
		break;
	case 6:
		if (HX_FIELD_EQ(inName,"Parent") ) { return hx::Val( Parent); }
		if (HX_FIELD_EQ(inName,"update") ) { return hx::Val( update_dyn()); }
		break;
	case 10:
		if (HX_FIELD_EQ(inName,"Background") ) { return hx::Val( Background); }
	}
	return super::__Field(inName,inCallProp);
}

hx::Val CodeDoorKeypad_obj::__SetField(const ::String &inName,const hx::Val &inValue,hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 4:
		if (HX_FIELD_EQ(inName,"Yep1") ) { Yep1=inValue.Cast<  ::flixel::FlxSprite >(); return inValue; }
		if (HX_FIELD_EQ(inName,"Yep2") ) { Yep2=inValue.Cast<  ::flixel::FlxSprite >(); return inValue; }
		if (HX_FIELD_EQ(inName,"Yep3") ) { Yep3=inValue.Cast<  ::flixel::FlxSprite >(); return inValue; }
		if (HX_FIELD_EQ(inName,"Yep4") ) { Yep4=inValue.Cast<  ::flixel::FlxSprite >(); return inValue; }
		break;
	case 6:
		if (HX_FIELD_EQ(inName,"Parent") ) { Parent=inValue.Cast<  ::flixel::FlxState >(); return inValue; }
		break;
	case 10:
		if (HX_FIELD_EQ(inName,"Background") ) { Background=inValue.Cast<  ::flixel::FlxSprite >(); return inValue; }
	}
	return super::__SetField(inName,inValue,inCallProp);
}

void CodeDoorKeypad_obj::__GetFields(Array< ::String> &outFields)
{
	outFields->push(HX_HCSTRING("Background","\x0e","\x98","\xce","\x1c"));
	outFields->push(HX_HCSTRING("Yep1","\xad","\x02","\x21","\x3b"));
	outFields->push(HX_HCSTRING("Yep2","\xae","\x02","\x21","\x3b"));
	outFields->push(HX_HCSTRING("Yep3","\xaf","\x02","\x21","\x3b"));
	outFields->push(HX_HCSTRING("Yep4","\xb0","\x02","\x21","\x3b"));
	outFields->push(HX_HCSTRING("Parent","\x4a","\x79","\x12","\x22"));
	super::__GetFields(outFields);
};

#if HXCPP_SCRIPTABLE
static hx::StorageInfo CodeDoorKeypad_obj_sMemberStorageInfo[] = {
	{hx::fsObject /*::flixel::FlxSprite*/ ,(int)offsetof(CodeDoorKeypad_obj,Background),HX_HCSTRING("Background","\x0e","\x98","\xce","\x1c")},
	{hx::fsObject /*::flixel::FlxSprite*/ ,(int)offsetof(CodeDoorKeypad_obj,Yep1),HX_HCSTRING("Yep1","\xad","\x02","\x21","\x3b")},
	{hx::fsObject /*::flixel::FlxSprite*/ ,(int)offsetof(CodeDoorKeypad_obj,Yep2),HX_HCSTRING("Yep2","\xae","\x02","\x21","\x3b")},
	{hx::fsObject /*::flixel::FlxSprite*/ ,(int)offsetof(CodeDoorKeypad_obj,Yep3),HX_HCSTRING("Yep3","\xaf","\x02","\x21","\x3b")},
	{hx::fsObject /*::flixel::FlxSprite*/ ,(int)offsetof(CodeDoorKeypad_obj,Yep4),HX_HCSTRING("Yep4","\xb0","\x02","\x21","\x3b")},
	{hx::fsObject /*::flixel::FlxState*/ ,(int)offsetof(CodeDoorKeypad_obj,Parent),HX_HCSTRING("Parent","\x4a","\x79","\x12","\x22")},
	{ hx::fsUnknown, 0, null()}
};
static hx::StaticInfo *CodeDoorKeypad_obj_sStaticStorageInfo = 0;
#endif

static ::String CodeDoorKeypad_obj_sMemberFields[] = {
	HX_HCSTRING("Background","\x0e","\x98","\xce","\x1c"),
	HX_HCSTRING("Yep1","\xad","\x02","\x21","\x3b"),
	HX_HCSTRING("Yep2","\xae","\x02","\x21","\x3b"),
	HX_HCSTRING("Yep3","\xaf","\x02","\x21","\x3b"),
	HX_HCSTRING("Yep4","\xb0","\x02","\x21","\x3b"),
	HX_HCSTRING("Parent","\x4a","\x79","\x12","\x22"),
	HX_HCSTRING("update","\x09","\x86","\x05","\x87"),
	::String(null()) };

static void CodeDoorKeypad_obj_sMarkStatics(HX_MARK_PARAMS) {
	HX_MARK_MEMBER_NAME(CodeDoorKeypad_obj::__mClass,"__mClass");
};

#ifdef HXCPP_VISIT_ALLOCS
static void CodeDoorKeypad_obj_sVisitStatics(HX_VISIT_PARAMS) {
	HX_VISIT_MEMBER_NAME(CodeDoorKeypad_obj::__mClass,"__mClass");
};

#endif

hx::Class CodeDoorKeypad_obj::__mClass;

void CodeDoorKeypad_obj::__register()
{
	hx::Static(__mClass) = new hx::Class_obj();
	__mClass->mName = HX_HCSTRING("CodeDoorKeypad","\xcf","\xe4","\xc9","\x08");
	__mClass->mSuper = &super::__SGetClass();
	__mClass->mConstructEmpty = &__CreateEmpty;
	__mClass->mConstructArgs = &__Create;
	__mClass->mGetStaticField = &hx::Class_obj::GetNoStaticField;
	__mClass->mSetStaticField = &hx::Class_obj::SetNoStaticField;
	__mClass->mMarkFunc = CodeDoorKeypad_obj_sMarkStatics;
	__mClass->mStatics = hx::Class_obj::dupFunctions(0 /* sStaticFields */);
	__mClass->mMembers = hx::Class_obj::dupFunctions(CodeDoorKeypad_obj_sMemberFields);
	__mClass->mCanCast = hx::TCanCast< CodeDoorKeypad_obj >;
#ifdef HXCPP_VISIT_ALLOCS
	__mClass->mVisitFunc = CodeDoorKeypad_obj_sVisitStatics;
#endif
#ifdef HXCPP_SCRIPTABLE
	__mClass->mMemberStorageInfo = CodeDoorKeypad_obj_sMemberStorageInfo;
#endif
#ifdef HXCPP_SCRIPTABLE
	__mClass->mStaticStorageInfo = CodeDoorKeypad_obj_sStaticStorageInfo;
#endif
	hx::_hx_RegisterClass(__mClass->mName, __mClass);
}

