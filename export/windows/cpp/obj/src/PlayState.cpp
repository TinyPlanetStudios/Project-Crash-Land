// Generated by Haxe 3.3.0
#include <hxcpp.h>

#ifndef INCLUDED_CodeDoorKeypad
#include <CodeDoorKeypad.h>
#endif
#ifndef INCLUDED_Cutscene
#include <Cutscene.h>
#endif
#ifndef INCLUDED_FuelCellGet
#include <FuelCellGet.h>
#endif
#ifndef INCLUDED_Global
#include <Global.h>
#endif
#ifndef INCLUDED_GravZone
#include <GravZone.h>
#endif
#ifndef INCLUDED_PlayState
#include <PlayState.h>
#endif
#ifndef INCLUDED_TrapDoorCode
#include <TrapDoorCode.h>
#endif
#ifndef INCLUDED_WrenchPickup
#include <WrenchPickup.h>
#endif
#ifndef INCLUDED_entity_Cover
#include <entity/Cover.h>
#endif
#ifndef INCLUDED_entity_Interactable
#include <entity/Interactable.h>
#endif
#ifndef INCLUDED_entity_Ladder
#include <entity/Ladder.h>
#endif
#ifndef INCLUDED_entity_Player
#include <entity/Player.h>
#endif
#ifndef INCLUDED_flixel_FlxBasic
#include <flixel/FlxBasic.h>
#endif
#ifndef INCLUDED_flixel_FlxG
#include <flixel/FlxG.h>
#endif
#ifndef INCLUDED_flixel_FlxGame
#include <flixel/FlxGame.h>
#endif
#ifndef INCLUDED_flixel_FlxObject
#include <flixel/FlxObject.h>
#endif
#ifndef INCLUDED_flixel_FlxSprite
#include <flixel/FlxSprite.h>
#endif
#ifndef INCLUDED_flixel_FlxState
#include <flixel/FlxState.h>
#endif
#ifndef INCLUDED_flixel_FlxSubState
#include <flixel/FlxSubState.h>
#endif
#ifndef INCLUDED_flixel_group_FlxTypedGroup
#include <flixel/group/FlxTypedGroup.h>
#endif
#ifndef INCLUDED_flixel_input_FlxInput
#include <flixel/input/FlxInput.h>
#endif
#ifndef INCLUDED_flixel_input_FlxKeyManager
#include <flixel/input/FlxKeyManager.h>
#endif
#ifndef INCLUDED_flixel_input_FlxPointer
#include <flixel/input/FlxPointer.h>
#endif
#ifndef INCLUDED_flixel_input_IFlxInput
#include <flixel/input/IFlxInput.h>
#endif
#ifndef INCLUDED_flixel_input_IFlxInputManager
#include <flixel/input/IFlxInputManager.h>
#endif
#ifndef INCLUDED_flixel_input_keyboard_FlxKeyboard
#include <flixel/input/keyboard/FlxKeyboard.h>
#endif
#ifndef INCLUDED_flixel_input_mouse_FlxMouse
#include <flixel/input/mouse/FlxMouse.h>
#endif
#ifndef INCLUDED_flixel_input_mouse_FlxMouseButton
#include <flixel/input/mouse/FlxMouseButton.h>
#endif
#ifndef INCLUDED_flixel_math_FlxPoint
#include <flixel/math/FlxPoint.h>
#endif
#ifndef INCLUDED_flixel_system_FlxSound
#include <flixel/system/FlxSound.h>
#endif
#ifndef INCLUDED_flixel_system_FlxSoundGroup
#include <flixel/system/FlxSoundGroup.h>
#endif
#ifndef INCLUDED_flixel_system_frontEnds_SoundFrontEnd
#include <flixel/system/frontEnds/SoundFrontEnd.h>
#endif
#ifndef INCLUDED_flixel_text_FlxText
#include <flixel/text/FlxText.h>
#endif
#ifndef INCLUDED_flixel_tweens_FlxTween
#include <flixel/tweens/FlxTween.h>
#endif
#ifndef INCLUDED_flixel_tweens_misc_VarTween
#include <flixel/tweens/misc/VarTween.h>
#endif
#ifndef INCLUDED_flixel_util_FlxPool_flixel_math_FlxPoint
#include <flixel/util/FlxPool_flixel_math_FlxPoint.h>
#endif
#ifndef INCLUDED_flixel_util_IFlxDestroyable
#include <flixel/util/IFlxDestroyable.h>
#endif
#ifndef INCLUDED_flixel_util_IFlxPool
#include <flixel/util/IFlxPool.h>
#endif
#ifndef INCLUDED_flixel_util_IFlxPooled
#include <flixel/util/IFlxPooled.h>
#endif
#ifndef INCLUDED_openfl__legacy_display_DisplayObject
#include <openfl/_legacy/display/DisplayObject.h>
#endif
#ifndef INCLUDED_openfl__legacy_display_DisplayObjectContainer
#include <openfl/_legacy/display/DisplayObjectContainer.h>
#endif
#ifndef INCLUDED_openfl__legacy_display_IBitmapDrawable
#include <openfl/_legacy/display/IBitmapDrawable.h>
#endif
#ifndef INCLUDED_openfl__legacy_display_InteractiveObject
#include <openfl/_legacy/display/InteractiveObject.h>
#endif
#ifndef INCLUDED_openfl__legacy_display_Sprite
#include <openfl/_legacy/display/Sprite.h>
#endif
#ifndef INCLUDED_openfl__legacy_events_EventDispatcher
#include <openfl/_legacy/events/EventDispatcher.h>
#endif
#ifndef INCLUDED_openfl__legacy_events_IEventDispatcher
#include <openfl/_legacy/events/IEventDispatcher.h>
#endif

static const Int _hx_array_data_6[] = {
	(Int)13,
};

void PlayState_obj::__construct( ::Dynamic MaxSize){
            	HX_STACK_FRAME("PlayState","new",0xf8bf96cf,"PlayState.new","PlayState.hx",17,0xb30d7781)
            	HX_STACK_THIS(this)
            	HX_STACK_ARG(MaxSize,"MaxSize")
HXLINE(  17)		super::__construct(MaxSize);
            	}

Dynamic PlayState_obj::__CreateEmpty() { return new PlayState_obj; }

hx::ObjectPtr< PlayState_obj > PlayState_obj::__new( ::Dynamic MaxSize)
{
	hx::ObjectPtr< PlayState_obj > _hx_result = new PlayState_obj();
	_hx_result->__construct(MaxSize);
	return _hx_result;
}

Dynamic PlayState_obj::__Create(hx::DynamicArray inArgs)
{
	hx::ObjectPtr< PlayState_obj > _hx_result = new PlayState_obj();
	_hx_result->__construct(inArgs[0]);
	return _hx_result;
}

void PlayState_obj::create(){
            		HX_BEGIN_LOCAL_FUNC_S1(hx::LocalFunc,_hx_Closure_0, ::PlayState,_gthis) HXARGC(0)
            		void _hx_run(){
            			HX_STACK_FRAME("PlayState","create",0x82220fed,"PlayState.create","PlayState.hx",60,0xb30d7781)
HXLINE(  60)			Bool _hx_tmp2 = (::Global_obj::Wrench == (int)0);
HXDLIN(  60)			if (_hx_tmp2) {
HXLINE(  62)				_gthis->openMessage(HX_("I don't think this is how it should look.\nOhh geez it's getting fuel EVERYWHERE, I really should fix this.\n A wrench and some tape should deal with the leak.",85,1b,11,07));
            			}
            			else {
HXLINE(  64)				Bool _hx_tmp3 = (::Global_obj::Wrench == (int)1);
HXDLIN(  64)				if (_hx_tmp3) {
HXLINE(  66)					::Global_obj::Wrench = (int)2;
HXLINE(  67)					_gthis->openMessage(HX_("Okay. I've undone some of the damage but this hunk of junk isn't going anywhere untill I replace the fuel cell.",c5,50,69,61));
            				}
            				else {
HXLINE(  69)					Bool _hx_tmp4;
HXDLIN(  69)					if ((::Global_obj::FuelCell != (int)1)) {
HXLINE(  69)						_hx_tmp4 = (::Global_obj::Fin == (int)0);
            					}
            					else {
HXLINE(  69)						_hx_tmp4 = true;
            					}
HXDLIN(  69)					if (_hx_tmp4) {
HXLINE(  71)						_gthis->openMessage(HX_("Okay now that the tanks full I just need to fix this things aerodynamics. Best I start by replacing the broken fin.",7d,a7,1b,aa));
HXLINE(  72)						::Global_obj::FuelCell = (int)2;
            					}
            					else {
HXLINE(  74)						Bool _hx_tmp5;
HXDLIN(  74)						if ((::Global_obj::Fin != (int)1)) {
HXLINE(  74)							_hx_tmp5 = (::Global_obj::FuelCell == (int)0);
            						}
            						else {
HXLINE(  74)							_hx_tmp5 = true;
            						}
HXDLIN(  74)						if (_hx_tmp5) {
HXLINE(  76)							_gthis->openMessage(HX_("Almost looks as good as new. All I need to add is a replacement nose cap and It'll be ready to fly.",12,8b,c0,6f));
HXLINE(  77)							::Global_obj::Fin = (int)2;
            						}
            						else {
HXLINE(  79)							Bool _hx_tmp6 = (::Global_obj::NoseCap == (int)1);
HXDLIN(  79)							if (_hx_tmp6) {
HXLINE(  81)								HX_VARI(  ::flixel::FlxState,nextState) =  ::Cutscene_obj::__new((int)1);
HXDLIN(  81)								Bool _hx_tmp7 = ::flixel::FlxG_obj::game->_state->switchTo(nextState);
HXDLIN(  81)								if (_hx_tmp7) {
HXLINE(  81)									::flixel::FlxG_obj::game->_requestedState = nextState;
            								}
            							}
            						}
            					}
            				}
            			}
            		}
            		HX_END_LOCAL_FUNC0((void))

            		HX_BEGIN_LOCAL_FUNC_S1(hx::LocalFunc,_hx_Closure_1, ::PlayState,_gthis) HXARGC(0)
            		void _hx_run(){
            			HX_STACK_FRAME("PlayState","create",0x82220fed,"PlayState.create","PlayState.hx",122,0xb30d7781)
HXLINE( 122)			Bool _hx_tmp27 = (::Global_obj::Wrench == (int)0);
HXDLIN( 122)			if (_hx_tmp27) {
HXLINE( 124)				_gthis->openSubState( ::WrenchPickup_obj::__new(_gthis));
HXLINE( 125)				::Global_obj::Wrench = (int)1;
            			}
            			else {
HXLINE( 129)				_gthis->openMessage(HX_("I've already got the wrench and tape.",ca,43,de,74));
            			}
            		}
            		HX_END_LOCAL_FUNC0((void))

            		HX_BEGIN_LOCAL_FUNC_S1(hx::LocalFunc,_hx_Closure_2, ::PlayState,_gthis) HXARGC(0)
            		void _hx_run(){
            			HX_STACK_FRAME("PlayState","create",0x82220fed,"PlayState.create","PlayState.hx",136,0xb30d7781)
HXLINE( 136)			_gthis->openMessage(HX_("What's this. Someone Tucked a code in here '25978'",d8,bc,7e,2c));
            		}
            		HX_END_LOCAL_FUNC0((void))

            		HX_BEGIN_LOCAL_FUNC_S1(hx::LocalFunc,_hx_Closure_3, ::PlayState,_gthis) HXARGC(0)
            		void _hx_run(){
            			HX_STACK_FRAME("PlayState","create",0x82220fed,"PlayState.create","PlayState.hx",142,0xb30d7781)
HXLINE( 142)			_gthis->openSubState( ::TrapDoorCode_obj::__new(_gthis));
            		}
            		HX_END_LOCAL_FUNC0((void))

            		HX_BEGIN_LOCAL_FUNC_S1(hx::LocalFunc,_hx_Closure_4, ::PlayState,_gthis) HXARGC(0)
            		void _hx_run(){
            			HX_STACK_FRAME("PlayState","create",0x82220fed,"PlayState.create","PlayState.hx",148,0xb30d7781)
HXLINE( 149)			_gthis->openMessage(HX_("this stuff is lethal, I'd better be carefull with is.",6f,77,f6,e1));
HXLINE( 150)			::Global_obj::TNT = true;
HXLINE( 151)			_gthis->Interactables->remove(_gthis->TNT);
HXLINE( 152)			_gthis->remove(_gthis->TNT,null()).StaticCast<  ::flixel::FlxBasic >();
            		}
            		HX_END_LOCAL_FUNC0((void))

            		HX_BEGIN_LOCAL_FUNC_S1(hx::LocalFunc,_hx_Closure_5, ::PlayState,_gthis) HXARGC(0)
            		void _hx_run(){
            			HX_STACK_FRAME("PlayState","create",0x82220fed,"PlayState.create","PlayState.hx",159,0xb30d7781)
HXLINE( 159)			Bool _hx_tmp38 = (::Global_obj::TNT == true);
HXDLIN( 159)			if (_hx_tmp38) {
HXLINE( 161)				_gthis->openMessage(HX_("That was dangerous.",74,ad,aa,da));
HXLINE( 162)				_gthis->Interactables->remove(_gthis->Rockwall);
HXLINE( 163)				_gthis->remove(_gthis->Rockwall,null()).StaticCast<  ::flixel::FlxBasic >();
HXLINE( 164)				_gthis->player->RockWall->LeftWall = false;
HXLINE( 165)				_gthis->player->CurrentZone = _gthis->player->getCurrentGravZone();
HXLINE( 166)				::flixel::FlxG_obj::sound->play(HX_("assets/sounds/kaboom.ogg",01,35,25,09),null(),null(),null(),null(),null());
            			}
            			else {
HXLINE( 170)				_gthis->openMessage(HX_("The rock is lose. I just need something to get through it",51,b1,89,4d));
            			}
            		}
            		HX_END_LOCAL_FUNC0((void))

            		HX_BEGIN_LOCAL_FUNC_S1(hx::LocalFunc,_hx_Closure_6, ::PlayState,_gthis) HXARGC(0)
            		void _hx_run(){
            			HX_STACK_FRAME("PlayState","create",0x82220fed,"PlayState.create","PlayState.hx",178,0xb30d7781)
HXLINE( 178)			Bool _hx_tmp42 = (::Global_obj::FuelCell == (int)0);
HXDLIN( 178)			if (_hx_tmp42) {
HXLINE( 180)				_gthis->openSubState( ::FuelCellGet_obj::__new(_gthis));
HXLINE( 181)				::Global_obj::FuelCell = (int)1;
HXLINE( 182)				_gthis->remove(_gthis->FuelCell,null()).StaticCast<  ::flixel::FlxBasic >();
HXLINE( 183)				_gthis->Interactables->remove(_gthis->FuelCell);
HXLINE( 184)				_gthis->openMessage(HX_("alright now that this thing is calibrated I should be able to replace the fuel I lost.\n Oh hey there was a key taucked behind it.",ab,f1,68,ff));
            			}
            		}
            		HX_END_LOCAL_FUNC0((void))

            		HX_BEGIN_LOCAL_FUNC_S1(hx::LocalFunc,_hx_Closure_7, ::PlayState,_gthis) HXARGC(0)
            		void _hx_run(){
            			HX_STACK_FRAME("PlayState","create",0x82220fed,"PlayState.create","PlayState.hx",192,0xb30d7781)
HXLINE( 192)			Bool _hx_tmp45 = (::Global_obj::FuelCell >= (int)1);
HXDLIN( 192)			if (_hx_tmp45) {
HXLINE( 194)				_gthis->openMessage(HX_("Hey this key seems to have done the trick.",ef,ba,cd,bf));
HXLINE( 195)				_gthis->remove(_gthis->KeyDoor,null()).StaticCast<  ::flixel::FlxBasic >();
HXLINE( 196)				_gthis->Interactables->remove(_gthis->KeyDoor);
HXLINE( 197)				_gthis->player->KeyDoor->LeftWall = false;
HXLINE( 198)				_gthis->player->CurrentZone = _gthis->player->getCurrentGravZone();
HXLINE( 199)				::flixel::FlxG_obj::sound->play(HX_("assets/sounds/gj2.ogg",d1,84,af,06),null(),null(),null(),null(),null());
            			}
            			else {
HXLINE( 203)				_gthis->openMessage(HX_("It's locked",d3,06,11,42));
            			}
            		}
            		HX_END_LOCAL_FUNC0((void))

            		HX_BEGIN_LOCAL_FUNC_S1(hx::LocalFunc,_hx_Closure_8, ::PlayState,_gthis) HXARGC(0)
            		void _hx_run(){
            			HX_STACK_FRAME("PlayState","create",0x82220fed,"PlayState.create","PlayState.hx",210,0xb30d7781)
HXLINE( 211)			::Global_obj::Fin = (int)1;
HXLINE( 212)			_gthis->openMessage(HX_("It's not the same model as the original but it will have to do.",40,ed,45,a1));
HXLINE( 213)			_gthis->Interactables->remove(_gthis->Fin);
HXLINE( 214)			_gthis->remove(_gthis->Fin,null()).StaticCast<  ::flixel::FlxBasic >();
            		}
            		HX_END_LOCAL_FUNC0((void))

            		HX_BEGIN_LOCAL_FUNC_S1(hx::LocalFunc,_hx_Closure_9, ::PlayState,_gthis) HXARGC(0)
            		void _hx_run(){
            			HX_STACK_FRAME("PlayState","create",0x82220fed,"PlayState.create","PlayState.hx",221,0xb30d7781)
HXLINE( 221)			_gthis->openSubState( ::CodeDoorKeypad_obj::__new(_gthis));
            		}
            		HX_END_LOCAL_FUNC0((void))

            		HX_BEGIN_LOCAL_FUNC_S1(hx::LocalFunc,_hx_Closure_10, ::PlayState,_gthis) HXARGC(0)
            		void _hx_run(){
            			HX_STACK_FRAME("PlayState","create",0x82220fed,"PlayState.create","PlayState.hx",228,0xb30d7781)
HXLINE( 229)			_gthis->openMessage(HX_("This is perfect.",d5,c8,04,e4));
HXLINE( 230)			::Global_obj::NoseCap = (int)1;
HXLINE( 231)			_gthis->Interactables->remove(_gthis->NoseCap);
HXLINE( 232)			_gthis->remove(_gthis->NoseCap,null()).StaticCast<  ::flixel::FlxBasic >();
            		}
            		HX_END_LOCAL_FUNC0((void))

            	HX_STACK_FRAME("PlayState","create",0x82220fed,"PlayState.create","PlayState.hx",42,0xb30d7781)
            	HX_STACK_THIS(this)
HXLINE(  41)		HX_VARI(  ::PlayState,_gthis) = hx::ObjectPtr<OBJ_>(this);
HXLINE(  43)		this->textBox =  ::flixel::FlxSprite_obj::__new((int)0,(int)520,null());
HXLINE(  44)		this->textBox->makeGraphic((int)1280,(int)200,(int)-16777216,null(),null());
HXLINE(  46)		this->text =  ::flixel::text::FlxText_obj::__new((int)10,(int)530,(int)1260,HX_("test",52,c8,f9,4c),(int)32,null());
HXLINE(  47)		this->text->set_color((int)-1);
HXLINE(  48)		this->text->set_alignment(HX_("center",d5,25,db,05));
HXLINE(  50)		::flixel::FlxG_obj::fixedTimestep = false;
HXLINE(  53)		this->player =  ::entity::Player_obj::__new((int)0,(int)0,null());
HXLINE(  56)		this->Interactables = ::Array_obj< ::Dynamic>::__new();
HXLINE(  57)		Float _hx_tmp = (((Float)-(::Global_obj::PlanetSize->y) / (Float)(int)2) - (int)45);
HXDLIN(  57)		Float _hx_tmp1 = (::Global_obj::Surface - (int)10);
HXDLIN(  57)		HX_VARI(  ::entity::Interactable,holder) =  ::entity::Interactable_obj::__new((int)-30,_hx_tmp,HX_("assets/images/rocket.png",fa,41,f0,12),(int)0,(int)10,_hx_tmp1,(int)100000, ::Dynamic(new _hx_Closure_0(_gthis)));
HXLINE(  84)		holder->set_angle((int)160);
HXLINE(  85)		this->Interactables->push(holder);
HXLINE(  88)		Float _hx_tmp8 = (::Global_obj::PlanetPos->x - ((Float)78.5));
HXDLIN(  88)		Float _hx_tmp9 = (::Global_obj::PlanetPos->y + (int)260);
HXDLIN(  88)		this->add( ::flixel::FlxSprite_obj::__new(_hx_tmp8,_hx_tmp9,HX_("assets/images/BedroomInterior.png",7c,b2,9c,dd)));
HXLINE(  90)		HX_VARI(  ::flixel::FlxSprite,holderSprite) =  ::flixel::FlxSprite_obj::__new((int)0,(int)0,HX_("assets/images/MineEntranceInterior.png",ff,9f,47,a2));
HXLINE(  91)		Float _hx_tmp10 = ::Global_obj::Surface;
HXDLIN(  91)		Float _hx_tmp11 = holderSprite->get_height();
HXDLIN(  91)		HX_VARI(  ::flixel::math::FlxPoint,Transform) =  ::flixel::math::FlxPoint_obj::__new((int)0,((_hx_tmp10 + _hx_tmp11) - (int)200));
HXLINE(  92)		HX_VARI(  ::flixel::math::FlxPoint,point) = ::flixel::math::FlxPoint_obj::_pool->get()->set((int)0,(int)0);
HXDLIN(  92)		point->_inPool = false;
HXDLIN(  92)		point->_weak = true;
HXDLIN(  92)		Transform->rotate(point,(int)-327);
HXLINE(  93)		Float _hx_tmp12 = ((::Global_obj::PlanetPos->x - Transform->x) - ((Float)0.5));
HXDLIN(  93)		Float _hx_tmp13 = ((::Global_obj::PlanetPos->y - Transform->y) - ((Float)37.5));
HXDLIN(  93)		holderSprite->setPosition(_hx_tmp12,_hx_tmp13);
HXLINE(  94)		this->MineEntrance = holderSprite;
HXLINE(  95)		this->add(holderSprite);
HXLINE(  98)		this->Covers = ::Array_obj< ::Dynamic>::__new();
HXLINE(  99)		Float _hx_tmp14 = (::Global_obj::Surface - (int)1);
HXDLIN(  99)		Float _hx_tmp15 = (::Global_obj::Surface + (int)100);
HXDLIN(  99)		HX_VARI(  ::entity::Cover,holderCover) =  ::entity::Cover_obj::__new((int)165,(int)195,_hx_tmp14,_hx_tmp15,HX_("assets/images/BedroomCover.png",41,2a,93,0e));
HXLINE( 100)		Float _hx_tmp16 = (::Global_obj::PlanetPos->x - ((Float)78.5));
HXDLIN( 100)		Float _hx_tmp17 = (::Global_obj::PlanetPos->y + (int)260);
HXDLIN( 100)		holderCover->setPosition(_hx_tmp16,_hx_tmp17);
HXLINE( 101)		this->Covers->push(holderCover);
HXLINE( 103)		Float _hx_tmp18 = (::Global_obj::Surface - (int)1);
HXDLIN( 103)		Float _hx_tmp19 = (::Global_obj::Surface + (int)100);
HXDLIN( 103)		holderCover =  ::entity::Cover_obj::__new((int)285,(int)330,_hx_tmp18,_hx_tmp19,HX_("assets/images/MineEntranceCover.png",de,fc,bd,76));
HXLINE( 104)		Float _hx_tmp20 = ::Global_obj::Surface;
HXDLIN( 104)		Float _hx_tmp21 = holderSprite->get_height();
HXDLIN( 104)		Transform =  ::flixel::math::FlxPoint_obj::__new((int)0,((_hx_tmp20 + _hx_tmp21) - (int)200));
HXLINE( 105)		HX_VARI_NAME(  ::flixel::math::FlxPoint,point1,"point") = ::flixel::math::FlxPoint_obj::_pool->get()->set((int)0,(int)0);
HXDLIN( 105)		point1->_inPool = false;
HXDLIN( 105)		point1->_weak = true;
HXDLIN( 105)		Transform->rotate(point1,(int)-327);
HXLINE( 106)		Float _hx_tmp22 = ((::Global_obj::PlanetPos->x - Transform->x) - ((Float)0.5));
HXDLIN( 106)		Float _hx_tmp23 = ((::Global_obj::PlanetPos->y - Transform->y) - ((Float)37.5));
HXDLIN( 106)		holderCover->setPosition(_hx_tmp22,_hx_tmp23);
HXLINE( 107)		this->Covers->push(holderCover);
HXLINE( 109)		{
HXLINE( 109)			HX_VARI( Int,_g) = (int)0;
HXDLIN( 109)			HX_VARI( ::Array< ::Dynamic>,_g1) = this->Covers;
HXDLIN( 109)			while((_g < _g1->length)){
HXLINE( 109)				HX_VARI(  ::entity::Cover,a) = _g1->__get(_g).StaticCast<  ::entity::Cover >();
HXDLIN( 109)				++_g;
HXLINE( 111)				this->add(a);
            			}
            		}
HXLINE( 115)		this->Planet =  ::flixel::FlxSprite_obj::__new((int)365,(int)85,HX_("assets/images/planet.png",3e,97,e2,23));
HXLINE( 116)		this->add(this->Planet);
HXLINE( 119)		Float _hx_tmp24 = (((Float)-(::Global_obj::PlanetSize->x) / (Float)(int)2) + (int)92);
HXDLIN( 119)		Float _hx_tmp25 = (((Float)-(::Global_obj::PlanetSize->y) / (Float)(int)2) + (int)181);
HXDLIN( 119)		Float _hx_tmp26 = (::Global_obj::Surface - (int)10);
HXDLIN( 119)		holder =  ::entity::Interactable_obj::__new(_hx_tmp24,_hx_tmp25,HX_("assets/images/table.png",3e,ef,4a,49),(int)60,(int)65,(int)189,_hx_tmp26, ::Dynamic(new _hx_Closure_1(_gthis)));
HXLINE( 132)		this->Interactables->push(holder);
HXLINE( 133)		Float _hx_tmp28 = (::Global_obj::Surface - (int)1);
HXDLIN( 133)		Float _hx_tmp29 = (::Global_obj::Surface + (int)20);
HXDLIN( 133)		holder =  ::entity::Interactable_obj::__new((int)0,(int)0,HX_("assets/images/empty.png",3d,1d,8e,98),(int)180,(int)185,_hx_tmp28,_hx_tmp29, ::Dynamic(new _hx_Closure_2(_gthis)));
HXLINE( 138)		this->Interactables->push(holder);
HXLINE( 139)		Float _hx_tmp30 = (::Global_obj::Surface - (int)1);
HXDLIN( 139)		Float _hx_tmp31 = (::Global_obj::Surface + (int)20);
HXDLIN( 139)		holder =  ::entity::Interactable_obj::__new((int)0,(int)0,HX_("assets/images/empty.png",3d,1d,8e,98),(int)290,(int)300,_hx_tmp30,_hx_tmp31, ::Dynamic(new _hx_Closure_3(_gthis)));
HXLINE( 144)		this->TrapDoor = holder;
HXLINE( 145)		this->Interactables->push(holder);
HXLINE( 146)		Float _hx_tmp32 = ((Float)-(::Global_obj::PlanetSize->x) / (Float)(int)2);
HXDLIN( 146)		Float _hx_tmp33 = ((Float)-(::Global_obj::PlanetSize->y) / (Float)(int)2);
HXDLIN( 146)		Float _hx_tmp34 = (::Global_obj::Surface - (int)10);
HXDLIN( 146)		holder =  ::entity::Interactable_obj::__new(_hx_tmp32,_hx_tmp33,HX_("assets/images/boombox.png",30,c6,97,ba),(int)270,(int)275,(int)189,_hx_tmp34, ::Dynamic(new _hx_Closure_4(_gthis)));
HXLINE( 154)		this->TNT = holder;
HXLINE( 155)		this->Interactables->push(holder);
HXLINE( 156)		Float _hx_tmp35 = ((Float)-(::Global_obj::PlanetSize->x) / (Float)(int)2);
HXDLIN( 156)		Float _hx_tmp36 = ((Float)-(::Global_obj::PlanetSize->y) / (Float)(int)2);
HXDLIN( 156)		Float _hx_tmp37 = (::Global_obj::Surface - (int)10);
HXDLIN( 156)		holder =  ::entity::Interactable_obj::__new(_hx_tmp35,_hx_tmp36,HX_("assets/images/rockWall.png",35,c0,65,fc),(int)95,(int)100,(int)189,_hx_tmp37, ::Dynamic(new _hx_Closure_5(_gthis)));
HXLINE( 173)		this->Rockwall = holder;
HXLINE( 174)		this->Interactables->push(holder);
HXLINE( 175)		Float _hx_tmp39 = ((Float)-(::Global_obj::PlanetSize->x) / (Float)(int)2);
HXDLIN( 175)		Float _hx_tmp40 = ((Float)-(::Global_obj::PlanetSize->y) / (Float)(int)2);
HXDLIN( 175)		Float _hx_tmp41 = (::Global_obj::Surface - (int)10);
HXDLIN( 175)		holder =  ::entity::Interactable_obj::__new(_hx_tmp39,_hx_tmp40,HX_("assets/images/fuelCell.png",9e,69,8e,6e),(int)125,(int)130,(int)189,_hx_tmp41, ::Dynamic(new _hx_Closure_6(_gthis)));
HXLINE( 187)		this->FuelCell = holder;
HXLINE( 188)		this->Interactables->push(holder);
HXLINE( 189)		Float _hx_tmp43 = ((Float)-(::Global_obj::PlanetSize->x) / (Float)(int)2);
HXDLIN( 189)		Float _hx_tmp44 = ((Float)-(::Global_obj::PlanetSize->y) / (Float)(int)2);
HXDLIN( 189)		holder =  ::entity::Interactable_obj::__new(_hx_tmp43,_hx_tmp44,HX_("assets/images/keydoor.png",7d,80,58,a2),(int)300,(int)310,(int)189,(int)210, ::Dynamic(new _hx_Closure_7(_gthis)));
HXLINE( 206)		this->KeyDoor = holder;
HXLINE( 207)		this->Interactables->push(holder);
HXLINE( 208)		Float _hx_tmp46 = ((Float)-(::Global_obj::PlanetSize->x) / (Float)(int)2);
HXDLIN( 208)		Float _hx_tmp47 = ((Float)-(::Global_obj::PlanetSize->y) / (Float)(int)2);
HXDLIN( 208)		holder =  ::entity::Interactable_obj::__new(_hx_tmp46,_hx_tmp47,HX_("assets/images/fin.png",3b,04,c5,f3),(int)290,(int)310,(int)100,(int)130, ::Dynamic(new _hx_Closure_8(_gthis)));
HXLINE( 216)		this->Fin = holder;
HXLINE( 217)		this->Interactables->push(holder);
HXLINE( 218)		Float _hx_tmp48 = ((Float)-(::Global_obj::PlanetSize->x) / (Float)(int)2);
HXDLIN( 218)		Float _hx_tmp49 = ((Float)-(::Global_obj::PlanetSize->y) / (Float)(int)2);
HXDLIN( 218)		holder =  ::entity::Interactable_obj::__new(_hx_tmp48,_hx_tmp49,HX_("assets/images/codedoor.png",01,30,06,c6),(int)350,(int)360,(int)189,(int)210, ::Dynamic(new _hx_Closure_9(_gthis)));
HXLINE( 223)		this->CodeDoor = holder;
HXLINE( 224)		this->Interactables->push(holder);
HXLINE( 225)		this->Interactables->push(holder);
HXLINE( 226)		Float _hx_tmp50 = ((Float)-(::Global_obj::PlanetSize->x) / (Float)(int)2);
HXDLIN( 226)		Float _hx_tmp51 = ((Float)-(::Global_obj::PlanetSize->y) / (Float)(int)2);
HXDLIN( 226)		holder =  ::entity::Interactable_obj::__new(_hx_tmp50,_hx_tmp51,HX_("assets/images/nosecap.png",cf,a5,98,3c),(int)10,(int)20,(int)189,(int)210, ::Dynamic(new _hx_Closure_10(_gthis)));
HXLINE( 234)		this->NoseCap = holder;
HXLINE( 235)		this->Interactables->push(holder);
HXLINE( 238)		{
HXLINE( 238)			HX_VARI_NAME( Int,_g2,"_g") = (int)0;
HXDLIN( 238)			HX_VARI_NAME( ::Array< ::Dynamic>,_g11,"_g1") = this->player->Ladders;
HXDLIN( 238)			while((_g2 < _g11->length)){
HXLINE( 238)				HX_VARI_NAME(  ::entity::Ladder,a1,"a") = _g11->__get(_g2).StaticCast<  ::entity::Ladder >();
HXDLIN( 238)				++_g2;
HXLINE( 240)				{
HXLINE( 240)					HX_VARI_NAME( Int,_g21,"_g2") = (int)0;
HXDLIN( 240)					HX_VARI( ::Array< ::Dynamic>,_g3) = a1->members;
HXDLIN( 240)					while((_g21 < _g3->length)){
HXLINE( 240)						HX_VARI(  ::flixel::FlxSprite,b) = _g3->__get(_g21).StaticCast<  ::flixel::FlxSprite >();
HXDLIN( 240)						++_g21;
HXLINE( 242)						this->add(b);
            					}
            				}
            			}
            		}
HXLINE( 247)		this->add(this->player);
HXLINE( 250)		this->useIcon =  ::flixel::FlxSprite_obj::__new((int)0,(int)0,HX_("assets/images/use.png",b7,5c,7d,34));
HXLINE( 253)		Float _hx_tmp52 = (::Global_obj::Surface - (int)5);
HXDLIN( 253)		this->Covers->push( ::entity::Cover_obj::__new((int)60,(int)103,(int)185,_hx_tmp52,HX_("assets/images/coverWrenchT1.png",8d,94,e1,a2)));
HXLINE( 254)		Float _hx_tmp53 = (::Global_obj::Surface - (int)5);
HXDLIN( 254)		this->Covers->push( ::entity::Cover_obj::__new((int)102,(int)130,(int)185,_hx_tmp53,HX_("assets/images/coverwrench2.png",b8,d0,de,4e)));
HXLINE( 255)		Float _hx_tmp54 = (::Global_obj::Surface - (int)5);
HXDLIN( 255)		this->Covers->push( ::entity::Cover_obj::__new((int)270,(int)310,(int)185,_hx_tmp54,HX_("assets/images/mineCover1.png",b3,b8,9f,eb)));
HXLINE( 256)		Float _hx_tmp55 = (::Global_obj::Surface - (int)5);
HXDLIN( 256)		this->Covers->push( ::entity::Cover_obj::__new((int)310,(int)360,(int)185,_hx_tmp55,HX_("assets/images/MineCover2.png",54,e1,5b,29)));
HXLINE( 257)		this->Covers->push( ::entity::Cover_obj::__new((int)290,(int)350,(int)110,(int)185,HX_("assets/images/minecover3.png",95,dd,bb,1b)));
HXLINE( 258)		Float _hx_tmp56 = (::Global_obj::Surface - (int)5);
HXDLIN( 258)		this->Covers->push( ::entity::Cover_obj::__new((int)0,(int)20,(int)185,_hx_tmp56,HX_("assets/images/minecover4.png",16,72,22,af)));
HXLINE( 260)		{
HXLINE( 260)			HX_VARI_NAME( Int,_g4,"_g") = (int)0;
HXDLIN( 260)			HX_VARI_NAME( ::Array< ::Dynamic>,_g12,"_g1") = this->Covers;
HXDLIN( 260)			while((_g4 < _g12->length)){
HXLINE( 260)				HX_VARI_NAME(  ::entity::Cover,a2,"a") = _g12->__get(_g4).StaticCast<  ::entity::Cover >();
HXDLIN( 260)				++_g4;
HXLINE( 262)				Int _hx_tmp57 = this->members->indexOf(a2,null());
HXDLIN( 262)				if ((_hx_tmp57 == (int)-1)) {
HXLINE( 264)					this->add(a2);
            				}
            			}
            		}
HXLINE( 268)		this->openMessage(HX_("ohh no I broke my ship!",7d,81,ec,b9));
HXLINE( 270)		::flixel::FlxG_obj::sound->playMusic(HX_("assets/music/music.ogg",10,2a,92,80),((Float).5),null(),null());
HXLINE( 272)		this->super::create();
            	}


void PlayState_obj::update(Float elapsed){
            	HX_STACK_FRAME("PlayState","update",0x8d182efa,"PlayState.update","PlayState.hx",276,0xb30d7781)
            	HX_STACK_THIS(this)
            	HX_STACK_ARG(elapsed,"elapsed")
HXLINE( 277)		this->super::update(elapsed);
HXLINE( 280)		Bool _hx_tmp = ::Global_obj::TrapDoorJustOpened;
HXDLIN( 280)		if (_hx_tmp) {
HXLINE( 282)			this->Interactables->remove(this->TrapDoor);
HXLINE( 283)			::Global_obj::TrapDoorJustOpened = false;
HXLINE( 284)			this->player->TrapDoor->DropThrough = true;
HXLINE( 285)			this->player->CurrentZone->DropThrough = true;
HXLINE( 286)			this->MineEntrance->loadGraphic(HX_("assets/images/MineEntranceInteriorPostDoor.png",0d,31,78,df),null(),null(),null(),null(),null());
HXLINE( 287)			this->player->GravZones->remove(this->player->TrapDoor);
HXLINE( 288)			::flixel::FlxG_obj::sound->play(HX_("assets/sounds/gj2.ogg",d1,84,af,06),(int)1,false,null(),null(),null());
            		}
HXLINE( 292)		Bool _hx_tmp1 = ::Global_obj::CodeDoorJustOpened;
HXDLIN( 292)		if (_hx_tmp1) {
HXLINE( 294)			::Global_obj::CodeDoorJustOpened = false;
HXLINE( 295)			this->Interactables->remove(this->CodeDoor);
HXLINE( 296)			this->remove(this->CodeDoor,null());
HXLINE( 297)			this->player->CodeDoor->LeftWall = false;
HXLINE( 298)			this->player->CurrentZone = this->player->getCurrentGravZone();
HXLINE( 299)			::flixel::FlxG_obj::sound->play(HX_("assets/sounds/gj2.ogg",d1,84,af,06),null(),null(),null(),null(),null());
            		}
HXLINE( 303)		Float _hx_tmp2 = this->player->radialPos;
HXDLIN( 303)		Float _hx_tmp3 = this->player->get_width();
HXDLIN( 303)		HX_VARI(  ::flixel::math::FlxPoint,Transform) =  ::flixel::math::FlxPoint_obj::__new((int)0,(_hx_tmp2 + ((Float)(_hx_tmp3 * (int)3) / (Float)(int)2)));
HXLINE( 304)		HX_VARI(  ::flixel::math::FlxPoint,point) = ::flixel::math::FlxPoint_obj::_pool->get()->set((int)0,(int)0);
HXDLIN( 304)		point->_inPool = false;
HXDLIN( 304)		point->_weak = true;
HXDLIN( 304)		Transform->rotate(point,-(this->player->anglePos));
HXLINE( 305)		this->useIcon->set_angle(-(this->player->anglePos));
HXLINE( 306)		Float _hx_tmp4 = (::Global_obj::PlanetPos->x - Transform->x);
HXDLIN( 306)		Float _hx_tmp5 = this->player->get_width();
HXDLIN( 306)		Float _hx_tmp6 = (_hx_tmp4 - ((Float)_hx_tmp5 / (Float)(int)2));
HXDLIN( 306)		Float _hx_tmp7 = (::Global_obj::PlanetPos->y - Transform->y);
HXDLIN( 306)		Float _hx_tmp8 = this->player->get_width();
HXDLIN( 306)		this->useIcon->setPosition(_hx_tmp6,(_hx_tmp7 - ((Float)_hx_tmp8 / (Float)(int)2)));
HXLINE( 309)		{
HXLINE( 309)			HX_VARI( Int,_g) = (int)0;
HXDLIN( 309)			HX_VARI( ::Array< ::Dynamic>,_g1) = this->Covers;
HXDLIN( 309)			while((_g < _g1->length)){
HXLINE( 309)				HX_VARI(  ::entity::Cover,a) = _g1->__get(_g).StaticCast<  ::entity::Cover >();
HXDLIN( 309)				++_g;
HXLINE( 311)				Bool _hx_tmp9;
HXDLIN( 311)				Bool _hx_tmp10;
HXDLIN( 311)				Bool _hx_tmp11;
HXDLIN( 311)				if ((this->player->radialPos < a->radialEnd)) {
HXLINE( 311)					_hx_tmp11 = (this->player->radialPos > (a->radialStart - (int)1));
            				}
            				else {
HXLINE( 311)					_hx_tmp11 = false;
            				}
HXDLIN( 311)				if (_hx_tmp11) {
HXLINE( 311)					_hx_tmp10 = (this->player->anglePos <= a->angleEnd);
            				}
            				else {
HXLINE( 311)					_hx_tmp10 = false;
            				}
HXDLIN( 311)				if (_hx_tmp10) {
HXLINE( 311)					_hx_tmp9 = (this->player->anglePos >= a->angleStart);
            				}
            				else {
HXLINE( 311)					_hx_tmp9 = false;
            				}
HXDLIN( 311)				if (_hx_tmp9) {
HXLINE( 314)					a->tween = ::flixel::tweens::FlxTween_obj::tween(a, ::Dynamic(hx::Anon_obj::Create(1)
            						->setFixed(0,HX_("alpha",5e,a7,96,21),(int)0)),((Float).4),null());
            				}
            				else {
HXLINE( 319)					a->tween = ::flixel::tweens::FlxTween_obj::tween(a, ::Dynamic(hx::Anon_obj::Create(1)
            						->setFixed(0,HX_("alpha",5e,a7,96,21),(int)1)),((Float).4),null());
            				}
            			}
            		}
HXLINE( 324)		HX_VARI( Bool,interacion) = false;
HXLINE( 325)		{
HXLINE( 325)			HX_VARI_NAME( Int,_g2,"_g") = (int)0;
HXDLIN( 325)			HX_VARI_NAME( ::Array< ::Dynamic>,_g11,"_g1") = this->Interactables;
HXDLIN( 325)			while((_g2 < _g11->length)){
HXLINE( 325)				HX_VARI_NAME(  ::entity::Interactable,a1,"a") = _g11->__get(_g2).StaticCast<  ::entity::Interactable >();
HXDLIN( 325)				++_g2;
HXLINE( 327)				Bool _hx_tmp12;
HXDLIN( 327)				Bool _hx_tmp13;
HXDLIN( 327)				Bool _hx_tmp14;
HXDLIN( 327)				if ((this->player->radialPos < a1->radialEnd)) {
HXLINE( 327)					_hx_tmp14 = (this->player->radialPos > a1->radialStart);
            				}
            				else {
HXLINE( 327)					_hx_tmp14 = false;
            				}
HXDLIN( 327)				if (_hx_tmp14) {
HXLINE( 327)					_hx_tmp13 = (this->player->anglePos <= a1->angleEnd);
            				}
            				else {
HXLINE( 327)					_hx_tmp13 = false;
            				}
HXDLIN( 327)				if (_hx_tmp13) {
HXLINE( 327)					_hx_tmp12 = (this->player->anglePos >= a1->angleStart);
            				}
            				else {
HXLINE( 327)					_hx_tmp12 = false;
            				}
HXDLIN( 327)				if (_hx_tmp12) {
HXLINE( 330)					interacion = true;
HXLINE( 331)					Bool _hx_tmp15 = ::flixel::FlxG_obj::keys->checkKeyArrayState(::Array_obj< Int >::fromData( _hx_array_data_6,1),(int)2);
HXDLIN( 331)					if (_hx_tmp15) {
HXLINE( 333)						a1->Callback();
            					}
            				}
            			}
            		}
HXLINE( 337)		if (interacion) {
HXLINE( 339)			this->add(this->useIcon);
            		}
            		else {
HXLINE( 343)			this->remove(this->useIcon,null());
            		}
HXLINE( 347)		Bool _hx_tmp16;
HXDLIN( 347)		if ((this->text->text != HX_("",00,00,00,00))) {
HXLINE( 347)			_hx_tmp16 = (::flixel::FlxG_obj::mouse->_leftButton->current == (int)2);
            		}
            		else {
HXLINE( 347)			_hx_tmp16 = false;
            		}
HXDLIN( 347)		if (_hx_tmp16) {
HXLINE( 349)			this->text->set_text(HX_("",00,00,00,00));
HXLINE( 350)			::Global_obj::Halt = false;
HXLINE( 351)			this->remove(this->text,null());
HXLINE( 352)			this->remove(this->textBox,null());
            		}
            	}


void PlayState_obj::openMessage(::String m){
            	HX_STACK_FRAME("PlayState","openMessage",0x3ea1148c,"PlayState.openMessage","PlayState.hx",357,0xb30d7781)
            	HX_STACK_THIS(this)
            	HX_STACK_ARG(m,"m")
HXLINE( 358)		this->text->set_text(m);
HXLINE( 359)		Float _hx_tmp = this->text->get_height();
HXDLIN( 359)		this->text->set_y((((Float)((int)200 - _hx_tmp) / (Float)(int)2) + (int)520));
HXLINE( 360)		::Global_obj::Halt = true;
HXLINE( 361)		this->add(this->textBox);
HXLINE( 362)		this->add(this->text);
            	}


HX_DEFINE_DYNAMIC_FUNC1(PlayState_obj,openMessage,(void))


PlayState_obj::PlayState_obj()
{
}

void PlayState_obj::__Mark(HX_MARK_PARAMS)
{
	HX_MARK_BEGIN_CLASS(PlayState);
	HX_MARK_MEMBER_NAME(Planet,"Planet");
	HX_MARK_MEMBER_NAME(player,"player");
	HX_MARK_MEMBER_NAME(Covers,"Covers");
	HX_MARK_MEMBER_NAME(Interactables,"Interactables");
	HX_MARK_MEMBER_NAME(TrapDoor,"TrapDoor");
	HX_MARK_MEMBER_NAME(TNT,"TNT");
	HX_MARK_MEMBER_NAME(Rockwall,"Rockwall");
	HX_MARK_MEMBER_NAME(FuelCell,"FuelCell");
	HX_MARK_MEMBER_NAME(KeyDoor,"KeyDoor");
	HX_MARK_MEMBER_NAME(Fin,"Fin");
	HX_MARK_MEMBER_NAME(CodeDoor,"CodeDoor");
	HX_MARK_MEMBER_NAME(NoseCap,"NoseCap");
	HX_MARK_MEMBER_NAME(textBox,"textBox");
	HX_MARK_MEMBER_NAME(text,"text");
	HX_MARK_MEMBER_NAME(MineEntrance,"MineEntrance");
	HX_MARK_MEMBER_NAME(useIcon,"useIcon");
	 ::flixel::FlxState_obj::__Mark(HX_MARK_ARG);
	HX_MARK_END_CLASS();
}

void PlayState_obj::__Visit(HX_VISIT_PARAMS)
{
	HX_VISIT_MEMBER_NAME(Planet,"Planet");
	HX_VISIT_MEMBER_NAME(player,"player");
	HX_VISIT_MEMBER_NAME(Covers,"Covers");
	HX_VISIT_MEMBER_NAME(Interactables,"Interactables");
	HX_VISIT_MEMBER_NAME(TrapDoor,"TrapDoor");
	HX_VISIT_MEMBER_NAME(TNT,"TNT");
	HX_VISIT_MEMBER_NAME(Rockwall,"Rockwall");
	HX_VISIT_MEMBER_NAME(FuelCell,"FuelCell");
	HX_VISIT_MEMBER_NAME(KeyDoor,"KeyDoor");
	HX_VISIT_MEMBER_NAME(Fin,"Fin");
	HX_VISIT_MEMBER_NAME(CodeDoor,"CodeDoor");
	HX_VISIT_MEMBER_NAME(NoseCap,"NoseCap");
	HX_VISIT_MEMBER_NAME(textBox,"textBox");
	HX_VISIT_MEMBER_NAME(text,"text");
	HX_VISIT_MEMBER_NAME(MineEntrance,"MineEntrance");
	HX_VISIT_MEMBER_NAME(useIcon,"useIcon");
	 ::flixel::FlxState_obj::__Visit(HX_VISIT_ARG);
}

hx::Val PlayState_obj::__Field(const ::String &inName,hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 3:
		if (HX_FIELD_EQ(inName,"TNT") ) { return hx::Val( TNT); }
		if (HX_FIELD_EQ(inName,"Fin") ) { return hx::Val( Fin); }
		break;
	case 4:
		if (HX_FIELD_EQ(inName,"text") ) { return hx::Val( text); }
		break;
	case 6:
		if (HX_FIELD_EQ(inName,"Planet") ) { return hx::Val( Planet); }
		if (HX_FIELD_EQ(inName,"player") ) { return hx::Val( player); }
		if (HX_FIELD_EQ(inName,"Covers") ) { return hx::Val( Covers); }
		if (HX_FIELD_EQ(inName,"create") ) { return hx::Val( create_dyn()); }
		if (HX_FIELD_EQ(inName,"update") ) { return hx::Val( update_dyn()); }
		break;
	case 7:
		if (HX_FIELD_EQ(inName,"KeyDoor") ) { return hx::Val( KeyDoor); }
		if (HX_FIELD_EQ(inName,"NoseCap") ) { return hx::Val( NoseCap); }
		if (HX_FIELD_EQ(inName,"textBox") ) { return hx::Val( textBox); }
		if (HX_FIELD_EQ(inName,"useIcon") ) { return hx::Val( useIcon); }
		break;
	case 8:
		if (HX_FIELD_EQ(inName,"TrapDoor") ) { return hx::Val( TrapDoor); }
		if (HX_FIELD_EQ(inName,"Rockwall") ) { return hx::Val( Rockwall); }
		if (HX_FIELD_EQ(inName,"FuelCell") ) { return hx::Val( FuelCell); }
		if (HX_FIELD_EQ(inName,"CodeDoor") ) { return hx::Val( CodeDoor); }
		break;
	case 11:
		if (HX_FIELD_EQ(inName,"openMessage") ) { return hx::Val( openMessage_dyn()); }
		break;
	case 12:
		if (HX_FIELD_EQ(inName,"MineEntrance") ) { return hx::Val( MineEntrance); }
		break;
	case 13:
		if (HX_FIELD_EQ(inName,"Interactables") ) { return hx::Val( Interactables); }
	}
	return super::__Field(inName,inCallProp);
}

hx::Val PlayState_obj::__SetField(const ::String &inName,const hx::Val &inValue,hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 3:
		if (HX_FIELD_EQ(inName,"TNT") ) { TNT=inValue.Cast<  ::entity::Interactable >(); return inValue; }
		if (HX_FIELD_EQ(inName,"Fin") ) { Fin=inValue.Cast<  ::entity::Interactable >(); return inValue; }
		break;
	case 4:
		if (HX_FIELD_EQ(inName,"text") ) { text=inValue.Cast<  ::flixel::text::FlxText >(); return inValue; }
		break;
	case 6:
		if (HX_FIELD_EQ(inName,"Planet") ) { Planet=inValue.Cast<  ::flixel::FlxSprite >(); return inValue; }
		if (HX_FIELD_EQ(inName,"player") ) { player=inValue.Cast<  ::entity::Player >(); return inValue; }
		if (HX_FIELD_EQ(inName,"Covers") ) { Covers=inValue.Cast< ::Array< ::Dynamic> >(); return inValue; }
		break;
	case 7:
		if (HX_FIELD_EQ(inName,"KeyDoor") ) { KeyDoor=inValue.Cast<  ::entity::Interactable >(); return inValue; }
		if (HX_FIELD_EQ(inName,"NoseCap") ) { NoseCap=inValue.Cast<  ::entity::Interactable >(); return inValue; }
		if (HX_FIELD_EQ(inName,"textBox") ) { textBox=inValue.Cast<  ::flixel::FlxSprite >(); return inValue; }
		if (HX_FIELD_EQ(inName,"useIcon") ) { useIcon=inValue.Cast<  ::flixel::FlxSprite >(); return inValue; }
		break;
	case 8:
		if (HX_FIELD_EQ(inName,"TrapDoor") ) { TrapDoor=inValue.Cast<  ::entity::Interactable >(); return inValue; }
		if (HX_FIELD_EQ(inName,"Rockwall") ) { Rockwall=inValue.Cast<  ::entity::Interactable >(); return inValue; }
		if (HX_FIELD_EQ(inName,"FuelCell") ) { FuelCell=inValue.Cast<  ::entity::Interactable >(); return inValue; }
		if (HX_FIELD_EQ(inName,"CodeDoor") ) { CodeDoor=inValue.Cast<  ::entity::Interactable >(); return inValue; }
		break;
	case 12:
		if (HX_FIELD_EQ(inName,"MineEntrance") ) { MineEntrance=inValue.Cast<  ::flixel::FlxSprite >(); return inValue; }
		break;
	case 13:
		if (HX_FIELD_EQ(inName,"Interactables") ) { Interactables=inValue.Cast< ::Array< ::Dynamic> >(); return inValue; }
	}
	return super::__SetField(inName,inValue,inCallProp);
}

void PlayState_obj::__GetFields(Array< ::String> &outFields)
{
	outFields->push(HX_HCSTRING("Planet","\xb8","\x06","\x45","\x6c"));
	outFields->push(HX_HCSTRING("player","\x61","\xeb","\xb8","\x37"));
	outFields->push(HX_HCSTRING("Covers","\x7c","\xc5","\xaf","\x01"));
	outFields->push(HX_HCSTRING("Interactables","\x03","\x0a","\x17","\x93"));
	outFields->push(HX_HCSTRING("TrapDoor","\x1b","\x6a","\xe2","\xbb"));
	outFields->push(HX_HCSTRING("TNT","\x9a","\x01","\x40","\x00"));
	outFields->push(HX_HCSTRING("Rockwall","\x4f","\x33","\x1e","\xda"));
	outFields->push(HX_HCSTRING("FuelCell","\x58","\xe0","\x02","\x63"));
	outFields->push(HX_HCSTRING("KeyDoor","\x8d","\x8a","\x98","\x69"));
	outFields->push(HX_HCSTRING("Fin","\xab","\x79","\x35","\x00"));
	outFields->push(HX_HCSTRING("CodeDoor","\x5b","\x25","\x72","\x50"));
	outFields->push(HX_HCSTRING("NoseCap","\x9f","\xaa","\x31","\x87"));
	outFields->push(HX_HCSTRING("textBox","\x5e","\x13","\xba","\x9e"));
	outFields->push(HX_HCSTRING("text","\xad","\xcc","\xf9","\x4c"));
	outFields->push(HX_HCSTRING("MineEntrance","\x49","\x2c","\x63","\x09"));
	outFields->push(HX_HCSTRING("useIcon","\x60","\x6f","\x5e","\x54"));
	super::__GetFields(outFields);
};

#if HXCPP_SCRIPTABLE
static hx::StorageInfo PlayState_obj_sMemberStorageInfo[] = {
	{hx::fsObject /*::flixel::FlxSprite*/ ,(int)offsetof(PlayState_obj,Planet),HX_HCSTRING("Planet","\xb8","\x06","\x45","\x6c")},
	{hx::fsObject /*::entity::Player*/ ,(int)offsetof(PlayState_obj,player),HX_HCSTRING("player","\x61","\xeb","\xb8","\x37")},
	{hx::fsObject /*Array< ::Dynamic >*/ ,(int)offsetof(PlayState_obj,Covers),HX_HCSTRING("Covers","\x7c","\xc5","\xaf","\x01")},
	{hx::fsObject /*Array< ::Dynamic >*/ ,(int)offsetof(PlayState_obj,Interactables),HX_HCSTRING("Interactables","\x03","\x0a","\x17","\x93")},
	{hx::fsObject /*::entity::Interactable*/ ,(int)offsetof(PlayState_obj,TrapDoor),HX_HCSTRING("TrapDoor","\x1b","\x6a","\xe2","\xbb")},
	{hx::fsObject /*::entity::Interactable*/ ,(int)offsetof(PlayState_obj,TNT),HX_HCSTRING("TNT","\x9a","\x01","\x40","\x00")},
	{hx::fsObject /*::entity::Interactable*/ ,(int)offsetof(PlayState_obj,Rockwall),HX_HCSTRING("Rockwall","\x4f","\x33","\x1e","\xda")},
	{hx::fsObject /*::entity::Interactable*/ ,(int)offsetof(PlayState_obj,FuelCell),HX_HCSTRING("FuelCell","\x58","\xe0","\x02","\x63")},
	{hx::fsObject /*::entity::Interactable*/ ,(int)offsetof(PlayState_obj,KeyDoor),HX_HCSTRING("KeyDoor","\x8d","\x8a","\x98","\x69")},
	{hx::fsObject /*::entity::Interactable*/ ,(int)offsetof(PlayState_obj,Fin),HX_HCSTRING("Fin","\xab","\x79","\x35","\x00")},
	{hx::fsObject /*::entity::Interactable*/ ,(int)offsetof(PlayState_obj,CodeDoor),HX_HCSTRING("CodeDoor","\x5b","\x25","\x72","\x50")},
	{hx::fsObject /*::entity::Interactable*/ ,(int)offsetof(PlayState_obj,NoseCap),HX_HCSTRING("NoseCap","\x9f","\xaa","\x31","\x87")},
	{hx::fsObject /*::flixel::FlxSprite*/ ,(int)offsetof(PlayState_obj,textBox),HX_HCSTRING("textBox","\x5e","\x13","\xba","\x9e")},
	{hx::fsObject /*::flixel::text::FlxText*/ ,(int)offsetof(PlayState_obj,text),HX_HCSTRING("text","\xad","\xcc","\xf9","\x4c")},
	{hx::fsObject /*::flixel::FlxSprite*/ ,(int)offsetof(PlayState_obj,MineEntrance),HX_HCSTRING("MineEntrance","\x49","\x2c","\x63","\x09")},
	{hx::fsObject /*::flixel::FlxSprite*/ ,(int)offsetof(PlayState_obj,useIcon),HX_HCSTRING("useIcon","\x60","\x6f","\x5e","\x54")},
	{ hx::fsUnknown, 0, null()}
};
static hx::StaticInfo *PlayState_obj_sStaticStorageInfo = 0;
#endif

static ::String PlayState_obj_sMemberFields[] = {
	HX_HCSTRING("Planet","\xb8","\x06","\x45","\x6c"),
	HX_HCSTRING("player","\x61","\xeb","\xb8","\x37"),
	HX_HCSTRING("Covers","\x7c","\xc5","\xaf","\x01"),
	HX_HCSTRING("Interactables","\x03","\x0a","\x17","\x93"),
	HX_HCSTRING("TrapDoor","\x1b","\x6a","\xe2","\xbb"),
	HX_HCSTRING("TNT","\x9a","\x01","\x40","\x00"),
	HX_HCSTRING("Rockwall","\x4f","\x33","\x1e","\xda"),
	HX_HCSTRING("FuelCell","\x58","\xe0","\x02","\x63"),
	HX_HCSTRING("KeyDoor","\x8d","\x8a","\x98","\x69"),
	HX_HCSTRING("Fin","\xab","\x79","\x35","\x00"),
	HX_HCSTRING("CodeDoor","\x5b","\x25","\x72","\x50"),
	HX_HCSTRING("NoseCap","\x9f","\xaa","\x31","\x87"),
	HX_HCSTRING("textBox","\x5e","\x13","\xba","\x9e"),
	HX_HCSTRING("text","\xad","\xcc","\xf9","\x4c"),
	HX_HCSTRING("MineEntrance","\x49","\x2c","\x63","\x09"),
	HX_HCSTRING("useIcon","\x60","\x6f","\x5e","\x54"),
	HX_HCSTRING("create","\xfc","\x66","\x0f","\x7c"),
	HX_HCSTRING("update","\x09","\x86","\x05","\x87"),
	HX_HCSTRING("openMessage","\x1d","\xc7","\x52","\x35"),
	::String(null()) };

static void PlayState_obj_sMarkStatics(HX_MARK_PARAMS) {
	HX_MARK_MEMBER_NAME(PlayState_obj::__mClass,"__mClass");
};

#ifdef HXCPP_VISIT_ALLOCS
static void PlayState_obj_sVisitStatics(HX_VISIT_PARAMS) {
	HX_VISIT_MEMBER_NAME(PlayState_obj::__mClass,"__mClass");
};

#endif

hx::Class PlayState_obj::__mClass;

void PlayState_obj::__register()
{
	hx::Static(__mClass) = new hx::Class_obj();
	__mClass->mName = HX_HCSTRING("PlayState","\x5d","\x83","\xc2","\x46");
	__mClass->mSuper = &super::__SGetClass();
	__mClass->mConstructEmpty = &__CreateEmpty;
	__mClass->mConstructArgs = &__Create;
	__mClass->mGetStaticField = &hx::Class_obj::GetNoStaticField;
	__mClass->mSetStaticField = &hx::Class_obj::SetNoStaticField;
	__mClass->mMarkFunc = PlayState_obj_sMarkStatics;
	__mClass->mStatics = hx::Class_obj::dupFunctions(0 /* sStaticFields */);
	__mClass->mMembers = hx::Class_obj::dupFunctions(PlayState_obj_sMemberFields);
	__mClass->mCanCast = hx::TCanCast< PlayState_obj >;
#ifdef HXCPP_VISIT_ALLOCS
	__mClass->mVisitFunc = PlayState_obj_sVisitStatics;
#endif
#ifdef HXCPP_SCRIPTABLE
	__mClass->mMemberStorageInfo = PlayState_obj_sMemberStorageInfo;
#endif
#ifdef HXCPP_SCRIPTABLE
	__mClass->mStaticStorageInfo = PlayState_obj_sStaticStorageInfo;
#endif
	hx::_hx_RegisterClass(__mClass->mName, __mClass);
}

